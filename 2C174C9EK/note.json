{
  "paragraphs": [
    {
      "text": "%md\n\n## Spark SQL and DataFrames with Scala\n#### Exploring an Airline Dataset\n##### Level: Beginner\nAuthor: Robert Hryniewicz\nTwitter: @RobHryniewicz\n\nLast updated: Aug 1st, 2016 (ver 0.6)\n",
      "dateUpdated": "Nov 18, 2016 12:34:32 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ]
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch2\u003eSpark SQL and DataFrames with Scala\u003c/h2\u003e\n\u003ch4\u003eExploring an Airline Dataset\u003c/h4\u003e\n\u003ch5\u003eLevel: Beginner\u003c/h5\u003e\n\u003cp\u003eAuthor: Robert Hryniewicz\n\u003cbr  /\u003eTwitter: @RobHryniewicz\u003c/p\u003e\n\u003cp\u003eLast updated: Aug 1st, 2016 (ver 0.6)\u003c/p\u003e\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch2\u003eSpark SQL and DataFrames with Scala\u003c/h2\u003e\n\u003ch4\u003eExploring an Airline Dataset\u003c/h4\u003e\n\u003ch5\u003eLevel: Beginner\u003c/h5\u003e\n\u003cp\u003eAuthor: Robert Hryniewicz\n\u003cbr  /\u003eTwitter: @RobHryniewicz\u003c/p\u003e\n\u003cp\u003eLast updated: Aug 1st, 2016 (ver 0.6)\u003c/p\u003e\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383663_1226131910",
      "id": "20160410-003138_1880368561",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Introduction\n\nIn this lab you will use Spark SQL via DataFrames API in Part 1 of the lab and SQL in Part 2 of the lab to explore an Airline Dataset. This is a very interesting dataset that is further explored in other demo notebooks.",
      "dateUpdated": "Nov 18, 2016 12:29:43 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 217.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ]
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eIn this lab you will use Spark SQL via DataFrames API in Part 1 of the lab and SQL in Part 2 of the lab to explore an Airline Dataset. This is a very interesting dataset that is further explored in other demo notebooks.\u003c/p\u003e\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eIn this lab you will use Spark SQL via DataFrames API in Part 1 of the lab and SQL in Part 2 of the lab to explore an Airline Dataset. This is a very interesting dataset that is further explored in other demo notebooks.\u003c/p\u003e\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383665_1236135381",
      "id": "20160410-003138_985055475",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Concepts\n\nA DataFrame is a distributed collection of data organized into named columns. \n#\nIt is conceptually equivalent to a table in a relational database or a data frame in R/Python, but with richer optimizations under the hood. \n#\nDataFrames can be constructed from a wide array of sources such as: structured data files, tables in Hive, external databases, or existing RDDs. \n#\n**[See SparkSQL docs for more info](http://spark.apache.org/docs/latest/sql-programming-guide.html#dataframes)**",
      "dateUpdated": "Nov 18, 2016 12:29:43 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ]
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003eConcepts\u003c/h3\u003e\n\u003cp\u003eA DataFrame is a distributed collection of data organized into named columns.\u003c/p\u003e\n\u003ch1\u003e\u003c/h1\u003e\n\u003cp\u003eIt is conceptually equivalent to a table in a relational database or a data frame in R/Python, but with richer optimizations under the hood.\u003c/p\u003e\n\u003ch1\u003e\u003c/h1\u003e\n\u003cp\u003eDataFrames can be constructed from a wide array of sources such as: structured data files, tables in Hive, external databases, or existing RDDs.\u003c/p\u003e\n\u003ch1\u003e\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href\u003d\"http://spark.apache.org/docs/latest/sql-programming-guide.html#dataframes\"\u003eSee SparkSQL docs for more info\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eConcepts\u003c/h3\u003e\n\u003cp\u003eA DataFrame is a distributed collection of data organized into named columns.\u003c/p\u003e\n\u003ch1\u003e\u003c/h1\u003e\n\u003cp\u003eIt is conceptually equivalent to a table in a relational database or a data frame in R/Python, but with richer optimizations under the hood.\u003c/p\u003e\n\u003ch1\u003e\u003c/h1\u003e\n\u003cp\u003eDataFrames can be constructed from a wide array of sources such as: structured data files, tables in Hive, external databases, or existing RDDs.\u003c/p\u003e\n\u003ch1\u003e\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href\u003d\"http://spark.apache.org/docs/latest/sql-programming-guide.html#dataframes\"\u003eSee SparkSQL docs for more info\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383665_1236135381",
      "id": "20160410-003138_875933602",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Scala",
      "text": "%md\n\nThroughout this lab we will use basic Scala syntax. \n\nIf you would like to **learn more about Scala**, here\u0027s an excellent **[Beginner Scala Tutorial](http://www.dhgarrette.com/nlpclass/scala/basics.html)**.",
      "dateUpdated": "Nov 18, 2016 12:29:43 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ]
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eThroughout this lab we will use basic Scala syntax.\u003c/p\u003e\n\u003cp\u003eIf you would like to \u003cstrong\u003elearn more about Scala\u003c/strong\u003e, here\u0027s an excellent \u003cstrong\u003e\u003ca href\u003d\"http://www.dhgarrette.com/nlpclass/scala/basics.html\"\u003eBeginner Scala Tutorial\u003c/a\u003e\u003c/strong\u003e.\u003c/p\u003e\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eThroughout this lab we will use basic Scala syntax.\u003c/p\u003e\n\u003cp\u003eIf you would like to \u003cstrong\u003elearn more about Scala\u003c/strong\u003e, here\u0027s an excellent \u003cstrong\u003e\u003ca href\u003d\"http://www.dhgarrette.com/nlpclass/scala/basics.html\"\u003eBeginner Scala Tutorial\u003c/a\u003e\u003c/strong\u003e.\u003c/p\u003e\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383665_1236135381",
      "id": "20160410-140356_736870357",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Lab Setup \u0026 Pre-Check\nBefore we proceed, let\u0027s set Spark\u0027s external package dependencies and then verify the Spark Version (you should be running at minimum Spark 1.6 for this lab).",
      "dateUpdated": "Nov 18, 2016 12:29:43 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ]
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003eLab Setup \u0026amp; Pre-Check\u003c/h3\u003e\n\u003cp\u003eBefore we proceed, let\u0027s set Spark\u0027s external package dependencies and then verify the Spark Version (you should be running at minimum Spark 1.6 for this lab).\u003c/p\u003e\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eLab Setup \u0026amp; Pre-Check\u003c/h3\u003e\n\u003cp\u003eBefore we proceed, let\u0027s set Spark\u0027s external package dependencies and then verify the Spark Version (you should be running at minimum Spark 1.6 for this lab).\u003c/p\u003e\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383665_1236135381",
      "id": "20160410-003138_815648629",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nTo run a paragraph in a Zeppelin notebook you can either click the `play` button (blue triangle) on the right-hand side or simply press `Shift + Enter`.",
      "dateUpdated": "Nov 18, 2016 12:29:43 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ]
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eTo run a paragraph in a Zeppelin notebook you can either click the \u003ccode\u003eplay\u003c/code\u003e button (blue triangle) on the right-hand side or simply press \u003ccode\u003eShift + Enter\u003c/code\u003e.\u003c/p\u003e\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eTo run a paragraph in a Zeppelin notebook you can either click the \u003ccode\u003eplay\u003c/code\u003e button (blue triangle) on the right-hand side or simply press \u003ccode\u003eShift + Enter\u003c/code\u003e.\u003c/p\u003e\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383665_1236135381",
      "id": "20160410-003138_1218388802",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Set External Spark Package Dependencies",
      "text": "%spark.dep\n\n// IMPORTANT! \n// This step/paragraph must be executed FIRST; if you have already executed other commands/paragraphs, \n//   please click \"Interpreter\" in the menu above and restart the \"spark\" interpreter and then run this paragraph\n//   before any other one.\n\nz.reset()\nz.load(\"com.databricks:spark-csv_2.11:1.4.0\")   // Spark CSV package",
      "dateUpdated": "Mar 9, 2017 1:05:37 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "DepInterpreter(%dep) deprecated. Remove dependencies and repositories through GUI interpreter menu instead.\nDepInterpreter(%dep) deprecated. Load dependency through GUI interpreter menu instead.\nres0: org.apache.zeppelin.dep.Dependency \u003d org.apache.zeppelin.dep.Dependency@73ac06ec\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "DepInterpreter(%dep) deprecated. Remove dependencies and repositories through GUI interpreter menu instead.\nDepInterpreter(%dep) deprecated. Load dependency through GUI interpreter menu instead.\nres0: org.apache.zeppelin.dep.Dependency \u003d org.apache.zeppelin.dep.Dependency@73ac06ec\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383665_1236135381",
      "id": "20160410-003138_1204021069",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n**Note**: The first time you run `sc.version` in the paragraph below, several services will initialize in the background. \nThis may take **1~2 min** so please **be patient**. Afterwards, each paragraph should run much more quickly since all the services will already be running.",
      "dateUpdated": "Nov 18, 2016 12:29:43 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ]
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The first time you run \u003ccode\u003esc.version\u003c/code\u003e in the paragraph below, several services will initialize in the background.\n\u003cbr  /\u003eThis may take \u003cstrong\u003e1~2 min\u003c/strong\u003e so please \u003cstrong\u003ebe patient\u003c/strong\u003e. Afterwards, each paragraph should run much more quickly since all the services will already be running.\u003c/p\u003e\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The first time you run \u003ccode\u003esc.version\u003c/code\u003e in the paragraph below, several services will initialize in the background.\n\u003cbr  /\u003eThis may take \u003cstrong\u003e1~2 min\u003c/strong\u003e so please \u003cstrong\u003ebe patient\u003c/strong\u003e. Afterwards, each paragraph should run much more quickly since all the services will already be running.\u003c/p\u003e\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383665_1236135381",
      "id": "20160410-003138_243701002",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Check Spark Version",
      "text": "%spark.spark\nsc.version",
      "dateUpdated": "Mar 9, 2017 1:05:37 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res0: String \u003d 1.6.2\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res0: String \u003d 1.6.2\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383665_1236135381",
      "id": "20160410-003138_631425785",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md ###Start of Lab\n",
      "dateUpdated": "Nov 18, 2016 12:29:43 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ]
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003eStart of Lab\u003c/h3\u003e\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eStart of Lab\u003c/h3\u003e\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383666_1237289628",
      "id": "20160410-003138_1656468668",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nIn the next paragraph we are going to download datasets using shell commands. A shell command in a Zeppelin notebook can can be invoked by \nprepending a block of shell commands with a line containing `%sh` characters.",
      "dateUpdated": "Nov 18, 2016 12:29:43 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ]
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eIn the next paragraph we are going to download datasets using shell commands. A shell command in a Zeppelin notebook can can be invoked by\n\u003cbr  /\u003eprepending a block of shell commands with a line containing \u003ccode\u003e%sh\u003c/code\u003e characters.\u003c/p\u003e\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eIn the next paragraph we are going to download datasets using shell commands. A shell command in a Zeppelin notebook can can be invoked by\n\u003cbr  /\u003eprepending a block of shell commands with a line containing \u003ccode\u003e%sh\u003c/code\u003e characters.\u003c/p\u003e\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383666_1237289628",
      "id": "20160410-003138_290903368",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Download Datasets",
      "text": "%sh\n\n# You will now download a subset of 2008 flights (only 100k lines)\n# The full dataset may be found here: http://stat-computing.org/dataexpo/2009/the-data.html\n\nwget https://raw.githubusercontent.com/roberthryniewicz/datasets/master/airline-dataset/flights/flights.csv -O /tmp/flights.csv\necho \"Downloaded!\"",
      "dateUpdated": "Nov 18, 2016 12:29:43 PM",
      "config": {
        "tableHide": false,
        "editorMode": "ace/mode/sh",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ]
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Downloaded!\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "Downloaded!\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383666_1237289628",
      "id": "20160410-003138_1540125404",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Move Datasets to HDFS",
      "text": "%sh\n\n# remove existing copies of dataset from HDFS\nhadoop fs -rm -r -f /tmp/airflightsdelays\n\n# create directory on HDFS\nhadoop fs -mkdir /tmp/airflightsdelays\n\n# put data into HDFS\nhadoop fs -put /tmp/flights.csv /tmp/airflightsdelays/",
      "dateUpdated": "Nov 18, 2016 12:29:43 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": []
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "apps": [],
      "jobName": "paragraph_1479452383666_1237289628",
      "id": "20160410-003138_1267267737",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Preview Downloaded File",
      "text": "%sh\nhadoop fs -cat /tmp/airflightsdelays/flights.csv | head",
      "dateUpdated": "Nov 18, 2016 12:29:43 PM",
      "config": {
        "tableHide": false,
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ]
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Year,Month,DayofMonth,DayOfWeek,DepTime,CRSDepTime,ArrTime,CRSArrTime,UniqueCarrier,FlightNum,TailNum,ActualElapsedTime,CRSElapsedTime,AirTime,ArrDelay,DepDelay,Origin,Dest,Distance,TaxiIn,TaxiOut,Cancelled,CancellationCode,Diverted,CarrierDelay,WeatherDelay,NASDelay,SecurityDelay,LateAircraftDelay\n2008,1,3,4,2003,1955,2211,2225,WN,335,N712SW,128,150,116,-14,8,IAD,TPA,810,4,8,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,754,735,1002,1000,WN,3231,N772SW,128,145,113,2,19,IAD,TPA,810,5,10,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,628,620,804,750,WN,448,N428WN,96,90,76,14,8,IND,BWI,515,3,17,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,926,930,1054,1100,WN,1746,N612SW,88,90,78,-6,-4,IND,BWI,515,3,7,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,1829,1755,1959,1925,WN,3920,N464WN,90,90,77,34,34,IND,BWI,515,3,10,0,,0,2,0,0,0,32\n2008,1,3,4,1940,1915,2121,2110,WN,378,N726SW,101,115,87,11,25,IND,JAX,688,4,10,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,1937,1830,2037,1940,WN,509,N763SW,240,250,230,57,67,IND,LAS,1591,3,7,0,,0,10,0,0,0,47\n2008,1,3,4,1039,1040,1132,1150,WN,535,N428WN,233,250,219,-18,-1,IND,LAS,1591,7,7,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,617,615,652,650,WN,11,N689SW,95,95,70,2,2,IND,MCI,451,6,19,0,,0,NA,NA,NA,NA,NA\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "Year,Month,DayofMonth,DayOfWeek,DepTime,CRSDepTime,ArrTime,CRSArrTime,UniqueCarrier,FlightNum,TailNum,ActualElapsedTime,CRSElapsedTime,AirTime,ArrDelay,DepDelay,Origin,Dest,Distance,TaxiIn,TaxiOut,Cancelled,CancellationCode,Diverted,CarrierDelay,WeatherDelay,NASDelay,SecurityDelay,LateAircraftDelay\n2008,1,3,4,2003,1955,2211,2225,WN,335,N712SW,128,150,116,-14,8,IAD,TPA,810,4,8,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,754,735,1002,1000,WN,3231,N772SW,128,145,113,2,19,IAD,TPA,810,5,10,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,628,620,804,750,WN,448,N428WN,96,90,76,14,8,IND,BWI,515,3,17,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,926,930,1054,1100,WN,1746,N612SW,88,90,78,-6,-4,IND,BWI,515,3,7,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,1829,1755,1959,1925,WN,3920,N464WN,90,90,77,34,34,IND,BWI,515,3,10,0,,0,2,0,0,0,32\n2008,1,3,4,1940,1915,2121,2110,WN,378,N726SW,101,115,87,11,25,IND,JAX,688,4,10,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,1937,1830,2037,1940,WN,509,N763SW,240,250,230,57,67,IND,LAS,1591,3,7,0,,0,10,0,0,0,47\n2008,1,3,4,1039,1040,1132,1150,WN,535,N428WN,233,250,219,-18,-1,IND,LAS,1591,7,7,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,617,615,652,650,WN,11,N689SW,95,95,70,2,2,IND,MCI,451,6,19,0,,0,NA,NA,NA,NA,NA\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383666_1237289628",
      "id": "20160410-003138_226044813",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.spark\n// Note that Spark Context and Spark SQL Context are automatically initialized in Zeppelin so we will skip those steps\n//val sc: Spark Context\n//val sqlContext: SQL Context\n\n// Create a DataFrame from datasets\nval df \u003d sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\")       // Use first line of all files as header\n    .option(\"inferSchema\", \"true\")  // Automatically infer data types\n    .load(\"/tmp/airflightsdelays/\") // Read all flights",
      "dateUpdated": "Mar 9, 2017 1:05:37 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "df: org.apache.spark.sql.DataFrame \u003d [Year: int, Month: int, DayofMonth: int, DayOfWeek: int, DepTime: string, CRSDepTime: int, ArrTime: string, CRSArrTime: int, UniqueCarrier: string, FlightNum: int, TailNum: string, ActualElapsedTime: string, CRSElapsedTime: int, AirTime: string, ArrDelay: string, DepDelay: string, Origin: string, Dest: string, Distance: int, TaxiIn: string, TaxiOut: string, Cancelled: int, CancellationCode: string, Diverted: int, CarrierDelay: string, WeatherDelay: string, NASDelay: string, SecurityDelay: string, LateAircraftDelay: string]\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "df: org.apache.spark.sql.DataFrame \u003d [Year: int, Month: int, DayofMonth: int, DayOfWeek: int, DepTime: string, CRSDepTime: int, ArrTime: string, CRSArrTime: int, UniqueCarrier: string, FlightNum: int, TailNum: string, ActualElapsedTime: string, CRSElapsedTime: int, AirTime: string, ArrDelay: string, DepDelay: string, Origin: string, Dest: string, Distance: int, TaxiIn: string, TaxiOut: string, Cancelled: int, CancellationCode: string, Diverted: int, CarrierDelay: string, WeatherDelay: string, NASDelay: string, SecurityDelay: string, LateAircraftDelay: string]\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383666_1237289628",
      "id": "20160410-003138_236600548",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.spark\n// Print the schema in a tree format\ndf.printSchema",
      "dateUpdated": "Mar 9, 2017 1:05:37 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- Year: integer (nullable \u003d true)\n |-- Month: integer (nullable \u003d true)\n |-- DayofMonth: integer (nullable \u003d true)\n |-- DayOfWeek: integer (nullable \u003d true)\n |-- DepTime: string (nullable \u003d true)\n |-- CRSDepTime: integer (nullable \u003d true)\n |-- ArrTime: string (nullable \u003d true)\n |-- CRSArrTime: integer (nullable \u003d true)\n |-- UniqueCarrier: string (nullable \u003d true)\n |-- FlightNum: integer (nullable \u003d true)\n |-- TailNum: string (nullable \u003d true)\n |-- ActualElapsedTime: string (nullable \u003d true)\n |-- CRSElapsedTime: integer (nullable \u003d true)\n |-- AirTime: string (nullable \u003d true)\n |-- ArrDelay: string (nullable \u003d true)\n |-- DepDelay: string (nullable \u003d true)\n |-- Origin: string (nullable \u003d true)\n |-- Dest: string (nullable \u003d true)\n |-- Distance: integer (nullable \u003d true)\n |-- TaxiIn: string (nullable \u003d true)\n |-- TaxiOut: string (nullable \u003d true)\n |-- Cancelled: integer (nullable \u003d true)\n |-- CancellationCode: string (nullable \u003d true)\n |-- Diverted: integer (nullable \u003d true)\n |-- CarrierDelay: string (nullable \u003d true)\n |-- WeatherDelay: string (nullable \u003d true)\n |-- NASDelay: string (nullable \u003d true)\n |-- SecurityDelay: string (nullable \u003d true)\n |-- LateAircraftDelay: string (nullable \u003d true)\n\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "root\n |-- Year: integer (nullable \u003d true)\n |-- Month: integer (nullable \u003d true)\n |-- DayofMonth: integer (nullable \u003d true)\n |-- DayOfWeek: integer (nullable \u003d true)\n |-- DepTime: string (nullable \u003d true)\n |-- CRSDepTime: integer (nullable \u003d true)\n |-- ArrTime: string (nullable \u003d true)\n |-- CRSArrTime: integer (nullable \u003d true)\n |-- UniqueCarrier: string (nullable \u003d true)\n |-- FlightNum: integer (nullable \u003d true)\n |-- TailNum: string (nullable \u003d true)\n |-- ActualElapsedTime: string (nullable \u003d true)\n |-- CRSElapsedTime: integer (nullable \u003d true)\n |-- AirTime: string (nullable \u003d true)\n |-- ArrDelay: string (nullable \u003d true)\n |-- DepDelay: string (nullable \u003d true)\n |-- Origin: string (nullable \u003d true)\n |-- Dest: string (nullable \u003d true)\n |-- Distance: integer (nullable \u003d true)\n |-- TaxiIn: string (nullable \u003d true)\n |-- TaxiOut: string (nullable \u003d true)\n |-- Cancelled: integer (nullable \u003d true)\n |-- CancellationCode: string (nullable \u003d true)\n |-- Diverted: integer (nullable \u003d true)\n |-- CarrierDelay: string (nullable \u003d true)\n |-- WeatherDelay: string (nullable \u003d true)\n |-- NASDelay: string (nullable \u003d true)\n |-- SecurityDelay: string (nullable \u003d true)\n |-- LateAircraftDelay: string (nullable \u003d true)\n\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383666_1237289628",
      "id": "20160410-003138_1553179639",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Dataset Description",
      "text": "%angular\n\n\u003ctable width\u003d\"100%\"\u003e\n\u003ctbody\u003e\u003ctr\u003e\n  \u003cth\u003e\u003c/th\u003e\n  \u003cth\u003eName\u003c/th\u003e\n  \u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n \u003ctd\u003e1  \u003c/td\u003e\u003ctd\u003e Year              \u003c/td\u003e\u003ctd\u003e1987-2008\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e2  \u003c/td\u003e\u003ctd\u003e Month             \u003c/td\u003e\u003ctd\u003e1-12\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e3  \u003c/td\u003e\u003ctd\u003e DayofMonth        \u003c/td\u003e\u003ctd\u003e1-31\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e4  \u003c/td\u003e\u003ctd\u003e DayOfWeek         \u003c/td\u003e\u003ctd\u003e1 (Monday) - 7 (Sunday)\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e5  \u003c/td\u003e\u003ctd\u003e DepTime           \u003c/td\u003e\u003ctd\u003eactual departure time (local, hhmm)\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e6  \u003c/td\u003e\u003ctd\u003e CRSDepTime        \u003c/td\u003e\u003ctd\u003escheduled departure time (local, hhmm)\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e7  \u003c/td\u003e\u003ctd\u003e ArrTime           \u003c/td\u003e\u003ctd\u003eactual arrival time (local, hhmm)\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e8  \u003c/td\u003e\u003ctd\u003e CRSArrTime        \u003c/td\u003e\u003ctd\u003escheduled arrival time (local, hhmm)\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e9  \u003c/td\u003e\u003ctd\u003e UniqueCarrier     \u003c/td\u003e\u003ctd\u003e\u003ca href\u003d\"supplemental-data.html\"\u003eunique carrier code\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e10 \u003c/td\u003e\u003ctd\u003e FlightNum         \u003c/td\u003e\u003ctd\u003eflight number\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e11 \u003c/td\u003e\u003ctd\u003e TailNum           \u003c/td\u003e\u003ctd\u003eplane tail number\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e12 \u003c/td\u003e\u003ctd\u003e ActualElapsedTime \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e13 \u003c/td\u003e\u003ctd\u003e CRSElapsedTime    \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e14 \u003c/td\u003e\u003ctd\u003e AirTime           \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e15 \u003c/td\u003e\u003ctd\u003e ArrDelay          \u003c/td\u003e\u003ctd\u003earrival delay, in minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e16 \u003c/td\u003e\u003ctd\u003e DepDelay          \u003c/td\u003e\u003ctd\u003edeparture delay, in minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e17 \u003c/td\u003e\u003ctd\u003e Origin            \u003c/td\u003e\u003ctd\u003eorigin \u003ca href\u003d\"supplemental-data.html\"\u003eIATA airport code\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e18 \u003c/td\u003e\u003ctd\u003e Dest              \u003c/td\u003e\u003ctd\u003edestination \u003ca href\u003d\"supplemental-data.html\"\u003eIATA airport code\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e19 \u003c/td\u003e\u003ctd\u003e Distance          \u003c/td\u003e\u003ctd\u003ein miles\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e20 \u003c/td\u003e\u003ctd\u003e TaxiIn            \u003c/td\u003e\u003ctd\u003etaxi in time, in minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e21 \u003c/td\u003e\u003ctd\u003e TaxiOut           \u003c/td\u003e\u003ctd\u003etaxi out time in minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e22 \u003c/td\u003e\u003ctd\u003e Cancelled           \u003c/td\u003e\u003ctd\u003ewas the flight cancelled?\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e23 \u003c/td\u003e\u003ctd\u003e CancellationCode  \u003c/td\u003e\u003ctd\u003ereason for cancellation (A \u003d carrier, B \u003d weather, C \u003d NAS, D \u003d security)\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e24 \u003c/td\u003e\u003ctd\u003e Diverted          \u003c/td\u003e\u003ctd\u003e1 \u003d yes, 0 \u003d no\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e25 \u003c/td\u003e\u003ctd\u003e CarrierDelay      \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e26 \u003c/td\u003e\u003ctd\u003e WeatherDelay      \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e27 \u003c/td\u003e\u003ctd\u003e NASDelay          \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e28 \u003c/td\u003e\u003ctd\u003e SecurityDelay     \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e29 \u003c/td\u003e\u003ctd\u003e LateAircraftDelay \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e",
      "dateUpdated": "Nov 18, 2016 12:29:43 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": true,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ]
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "ANGULAR",
            "data": "\u003ctable width\u003d\"100%\"\u003e\n\u003ctbody\u003e\u003ctr\u003e\n  \u003cth\u003e\u003c/th\u003e\n  \u003cth\u003eName\u003c/th\u003e\n  \u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n \u003ctd\u003e1  \u003c/td\u003e\u003ctd\u003e Year              \u003c/td\u003e\u003ctd\u003e1987-2008\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e2  \u003c/td\u003e\u003ctd\u003e Month             \u003c/td\u003e\u003ctd\u003e1-12\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e3  \u003c/td\u003e\u003ctd\u003e DayofMonth        \u003c/td\u003e\u003ctd\u003e1-31\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e4  \u003c/td\u003e\u003ctd\u003e DayOfWeek         \u003c/td\u003e\u003ctd\u003e1 (Monday) - 7 (Sunday)\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e5  \u003c/td\u003e\u003ctd\u003e DepTime           \u003c/td\u003e\u003ctd\u003eactual departure time (local, hhmm)\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e6  \u003c/td\u003e\u003ctd\u003e CRSDepTime        \u003c/td\u003e\u003ctd\u003escheduled departure time (local, hhmm)\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e7  \u003c/td\u003e\u003ctd\u003e ArrTime           \u003c/td\u003e\u003ctd\u003eactual arrival time (local, hhmm)\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e8  \u003c/td\u003e\u003ctd\u003e CRSArrTime        \u003c/td\u003e\u003ctd\u003escheduled arrival time (local, hhmm)\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e9  \u003c/td\u003e\u003ctd\u003e UniqueCarrier     \u003c/td\u003e\u003ctd\u003e\u003ca href\u003d\"supplemental-data.html\"\u003eunique carrier code\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e10 \u003c/td\u003e\u003ctd\u003e FlightNum         \u003c/td\u003e\u003ctd\u003eflight number\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e11 \u003c/td\u003e\u003ctd\u003e TailNum           \u003c/td\u003e\u003ctd\u003eplane tail number\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e12 \u003c/td\u003e\u003ctd\u003e ActualElapsedTime \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e13 \u003c/td\u003e\u003ctd\u003e CRSElapsedTime    \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e14 \u003c/td\u003e\u003ctd\u003e AirTime           \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e15 \u003c/td\u003e\u003ctd\u003e ArrDelay          \u003c/td\u003e\u003ctd\u003earrival delay, in minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e16 \u003c/td\u003e\u003ctd\u003e DepDelay          \u003c/td\u003e\u003ctd\u003edeparture delay, in minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e17 \u003c/td\u003e\u003ctd\u003e Origin            \u003c/td\u003e\u003ctd\u003eorigin \u003ca href\u003d\"supplemental-data.html\"\u003eIATA airport code\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e18 \u003c/td\u003e\u003ctd\u003e Dest              \u003c/td\u003e\u003ctd\u003edestination \u003ca href\u003d\"supplemental-data.html\"\u003eIATA airport code\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e19 \u003c/td\u003e\u003ctd\u003e Distance          \u003c/td\u003e\u003ctd\u003ein miles\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e20 \u003c/td\u003e\u003ctd\u003e TaxiIn            \u003c/td\u003e\u003ctd\u003etaxi in time, in minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e21 \u003c/td\u003e\u003ctd\u003e TaxiOut           \u003c/td\u003e\u003ctd\u003etaxi out time in minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e22 \u003c/td\u003e\u003ctd\u003e Cancelled           \u003c/td\u003e\u003ctd\u003ewas the flight cancelled?\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e23 \u003c/td\u003e\u003ctd\u003e CancellationCode  \u003c/td\u003e\u003ctd\u003ereason for cancellation (A \u003d carrier, B \u003d weather, C \u003d NAS, D \u003d security)\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e24 \u003c/td\u003e\u003ctd\u003e Diverted          \u003c/td\u003e\u003ctd\u003e1 \u003d yes, 0 \u003d no\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e25 \u003c/td\u003e\u003ctd\u003e CarrierDelay      \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e26 \u003c/td\u003e\u003ctd\u003e WeatherDelay      \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e27 \u003c/td\u003e\u003ctd\u003e NASDelay          \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e28 \u003c/td\u003e\u003ctd\u003e SecurityDelay     \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e29 \u003c/td\u003e\u003ctd\u003e LateAircraftDelay \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "ANGULAR",
        "msg": "\u003ctable width\u003d\"100%\"\u003e\n\u003ctbody\u003e\u003ctr\u003e\n  \u003cth\u003e\u003c/th\u003e\n  \u003cth\u003eName\u003c/th\u003e\n  \u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n \u003ctd\u003e1  \u003c/td\u003e\u003ctd\u003e Year              \u003c/td\u003e\u003ctd\u003e1987-2008\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e2  \u003c/td\u003e\u003ctd\u003e Month             \u003c/td\u003e\u003ctd\u003e1-12\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e3  \u003c/td\u003e\u003ctd\u003e DayofMonth        \u003c/td\u003e\u003ctd\u003e1-31\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e4  \u003c/td\u003e\u003ctd\u003e DayOfWeek         \u003c/td\u003e\u003ctd\u003e1 (Monday) - 7 (Sunday)\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e5  \u003c/td\u003e\u003ctd\u003e DepTime           \u003c/td\u003e\u003ctd\u003eactual departure time (local, hhmm)\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e6  \u003c/td\u003e\u003ctd\u003e CRSDepTime        \u003c/td\u003e\u003ctd\u003escheduled departure time (local, hhmm)\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e7  \u003c/td\u003e\u003ctd\u003e ArrTime           \u003c/td\u003e\u003ctd\u003eactual arrival time (local, hhmm)\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e8  \u003c/td\u003e\u003ctd\u003e CRSArrTime        \u003c/td\u003e\u003ctd\u003escheduled arrival time (local, hhmm)\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e9  \u003c/td\u003e\u003ctd\u003e UniqueCarrier     \u003c/td\u003e\u003ctd\u003e\u003ca href\u003d\"supplemental-data.html\"\u003eunique carrier code\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e10 \u003c/td\u003e\u003ctd\u003e FlightNum         \u003c/td\u003e\u003ctd\u003eflight number\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e11 \u003c/td\u003e\u003ctd\u003e TailNum           \u003c/td\u003e\u003ctd\u003eplane tail number\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e12 \u003c/td\u003e\u003ctd\u003e ActualElapsedTime \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e13 \u003c/td\u003e\u003ctd\u003e CRSElapsedTime    \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e14 \u003c/td\u003e\u003ctd\u003e AirTime           \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e15 \u003c/td\u003e\u003ctd\u003e ArrDelay          \u003c/td\u003e\u003ctd\u003earrival delay, in minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e16 \u003c/td\u003e\u003ctd\u003e DepDelay          \u003c/td\u003e\u003ctd\u003edeparture delay, in minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e17 \u003c/td\u003e\u003ctd\u003e Origin            \u003c/td\u003e\u003ctd\u003eorigin \u003ca href\u003d\"supplemental-data.html\"\u003eIATA airport code\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e18 \u003c/td\u003e\u003ctd\u003e Dest              \u003c/td\u003e\u003ctd\u003edestination \u003ca href\u003d\"supplemental-data.html\"\u003eIATA airport code\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e19 \u003c/td\u003e\u003ctd\u003e Distance          \u003c/td\u003e\u003ctd\u003ein miles\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e20 \u003c/td\u003e\u003ctd\u003e TaxiIn            \u003c/td\u003e\u003ctd\u003etaxi in time, in minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e21 \u003c/td\u003e\u003ctd\u003e TaxiOut           \u003c/td\u003e\u003ctd\u003etaxi out time in minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e22 \u003c/td\u003e\u003ctd\u003e Cancelled           \u003c/td\u003e\u003ctd\u003ewas the flight cancelled?\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e23 \u003c/td\u003e\u003ctd\u003e CancellationCode  \u003c/td\u003e\u003ctd\u003ereason for cancellation (A \u003d carrier, B \u003d weather, C \u003d NAS, D \u003d security)\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e24 \u003c/td\u003e\u003ctd\u003e Diverted          \u003c/td\u003e\u003ctd\u003e1 \u003d yes, 0 \u003d no\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e25 \u003c/td\u003e\u003ctd\u003e CarrierDelay      \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e26 \u003c/td\u003e\u003ctd\u003e WeatherDelay      \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e27 \u003c/td\u003e\u003ctd\u003e NASDelay          \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e28 \u003c/td\u003e\u003ctd\u003e SecurityDelay     \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\n \u003ctd\u003e29 \u003c/td\u003e\u003ctd\u003e LateAircraftDelay \u003c/td\u003e\u003ctd\u003ein minutes\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e"
      },
      "apps": [],
      "jobName": "paragraph_1479452383666_1237289628",
      "id": "20160410-003138_1626463388",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Part 1: Using DataFrames API to Analyze Airline Dataset",
      "dateUpdated": "Nov 18, 2016 12:29:43 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ]
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003ePart 1: Using DataFrames API to Analyze Airline Dataset\u003c/h3\u003e\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003ePart 1: Using DataFrames API to Analyze Airline Dataset\u003c/h3\u003e\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383666_1237289628",
      "id": "20160410-003138_650819453",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Part 1: Using DataFrames to Analyze Dataset",
      "text": "%spark.spark\n// Show a subset of columns with \"select\"\ndf.select(\"UniqueCarrier\", \"FlightNum\", \"DepDelay\", \"ArrDelay\", \"Distance\").show",
      "dateUpdated": "Mar 9, 2017 1:09:09 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": false,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------------+---------+--------+--------+--------+\n|UniqueCarrier|FlightNum|DepDelay|ArrDelay|Distance|\n+-------------+---------+--------+--------+--------+\n|           WN|      335|       8|     -14|     810|\n|           WN|     3231|      19|       2|     810|\n|           WN|      448|       8|      14|     515|\n|           WN|     1746|      -4|      -6|     515|\n|           WN|     3920|      34|      34|     515|\n|           WN|      378|      25|      11|     688|\n|           WN|      509|      67|      57|    1591|\n|           WN|      535|      -1|     -18|    1591|\n|           WN|       11|       2|       2|     451|\n|           WN|      810|       0|     -16|     451|\n|           WN|      100|       6|       1|     828|\n|           WN|     1333|      94|      80|     828|\n|           WN|      829|      -4|       1|     162|\n|           WN|     1016|       0|      10|     162|\n|           WN|     1827|       2|      -4|     162|\n|           WN|     2272|       9|      11|     162|\n|           WN|      675|      27|      15|    1489|\n|           WN|     1144|       9|     -15|    1489|\n|           WN|        4|      28|      16|     838|\n|           WN|       54|      51|      37|     220|\n+-------------+---------+--------+--------+--------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "+-------------+---------+--------+--------+--------+\n|UniqueCarrier|FlightNum|DepDelay|ArrDelay|Distance|\n+-------------+---------+--------+--------+--------+\n|           WN|      335|       8|     -14|     810|\n|           WN|     3231|      19|       2|     810|\n|           WN|      448|       8|      14|     515|\n|           WN|     1746|      -4|      -6|     515|\n|           WN|     3920|      34|      34|     515|\n|           WN|      378|      25|      11|     688|\n|           WN|      509|      67|      57|    1591|\n|           WN|      535|      -1|     -18|    1591|\n|           WN|       11|       2|       2|     451|\n|           WN|      810|       0|     -16|     451|\n|           WN|      100|       6|       1|     828|\n|           WN|     1333|      94|      80|     828|\n|           WN|      829|      -4|       1|     162|\n|           WN|     1016|       0|      10|     162|\n|           WN|     1827|       2|      -4|     162|\n|           WN|     2272|       9|      11|     162|\n|           WN|      675|      27|      15|    1489|\n|           WN|     1144|       9|     -15|    1489|\n|           WN|        4|      28|      16|     838|\n|           WN|       54|      51|      37|     220|\n+-------------+---------+--------+--------+--------+\nonly showing top 20 rows\n\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383666_1237289628",
      "id": "20160410-003138_1188332400",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.spark\n// Create a DataFrame containing Flights with delayed Departure by more than 15 min using \"filter\"\nval delayedDF \u003d df.select(\"UniqueCarrier\", \"DepDelay\").filter($\"DepDelay\" \u003e 15).cache\ndelayedDF.show",
      "dateUpdated": "Mar 9, 2017 1:09:10 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "delayedDF: org.apache.spark.sql.DataFrame \u003d [UniqueCarrier: string, DepDelay: string]\n+-------------+--------+\n|UniqueCarrier|DepDelay|\n+-------------+--------+\n|           WN|      19|\n|           WN|      34|\n|           WN|      25|\n|           WN|      67|\n|           WN|      94|\n|           WN|      27|\n|           WN|      28|\n|           WN|      51|\n|           WN|      32|\n|           WN|      20|\n|           WN|      25|\n|           WN|      87|\n|           WN|      29|\n|           WN|      82|\n|           WN|      19|\n|           WN|      39|\n|           WN|      82|\n|           WN|      22|\n|           WN|      29|\n|           WN|      56|\n+-------------+--------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "delayedDF: org.apache.spark.sql.DataFrame \u003d [UniqueCarrier: string, DepDelay: string]\n+-------------+--------+\n|UniqueCarrier|DepDelay|\n+-------------+--------+\n|           WN|      19|\n|           WN|      34|\n|           WN|      25|\n|           WN|      67|\n|           WN|      94|\n|           WN|      27|\n|           WN|      28|\n|           WN|      51|\n|           WN|      32|\n|           WN|      20|\n|           WN|      25|\n|           WN|      87|\n|           WN|      29|\n|           WN|      82|\n|           WN|      19|\n|           WN|      39|\n|           WN|      82|\n|           WN|      22|\n|           WN|      29|\n|           WN|      56|\n+-------------+--------+\nonly showing top 20 rows\n\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383666_1237289628",
      "id": "20160410-003138_704729700",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.spark\n// Print total number of delayed flights\nprintln(\"Total Number of Delayed Flights: \" + delayedDF.count)",
      "dateUpdated": "Mar 9, 2017 1:09:10 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Total Number of Delayed Flights: 19587\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "Total Number of Delayed Flights: 19587\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383667_1236904879",
      "id": "20160410-003138_1019754695",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Define a UDF to Determine Delays",
      "text": "%spark.spark\nimport org.apache.spark.sql.functions.udf\n\n// Define a UDF to find delayed flights\n\n// Assume:\n//  if ArrDelay is not available then Delayed \u003d False\n//  if ArrDelay \u003e 15 min then Delayed \u003d True else False\n\nval isDelayedUDF \u003d udf((time: String) \u003d\u003e if (time \u003d\u003d \"NA\") 0 else if (time.toInt \u003e 15) 1 else 0)",
      "dateUpdated": "Mar 9, 2017 1:09:10 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import org.apache.spark.sql.functions.udf\nisDelayedUDF: org.apache.spark.sql.UserDefinedFunction \u003d UserDefinedFunction(\u003cfunction1\u003e,IntegerType,List(StringType))\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.sql.functions.udf\nisDelayedUDF: org.apache.spark.sql.UserDefinedFunction \u003d UserDefinedFunction(\u003cfunction1\u003e,IntegerType,List(StringType))\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383667_1236904879",
      "id": "20160410-003138_2097655805",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.spark\n// Define a new DataFrame that contains a subset of the original columns and a new column \"IsDelayed\" by applying a UDF\n// isDelayed()  on \"DepDelay\" column\n\nval updatedDF \u003d df.select($\"Year\", $\"Month\", $\"DayofMonth\", $\"DayOfWeek\", $\"CRSDepTime\", $\"UniqueCarrier\", $\"FlightNum\", \n                    $\"DepDelay\", $\"Origin\", $\"Dest\", $\"TaxiIn\", $\"TaxiOut\", $\"Distance\",\n                    isDelayedUDF($\"DepDelay\").alias(\"IsDelayed\")).cache\n\nupdatedDF.show // Notice new column \"IsDelayed\"",
      "dateUpdated": "Mar 9, 2017 1:09:46 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "updatedDF: org.apache.spark.sql.DataFrame \u003d [Year: int, Month: int, DayofMonth: int, DayOfWeek: int, CRSDepTime: int, UniqueCarrier: string, FlightNum: int, DepDelay: string, Origin: string, Dest: string, TaxiIn: string, TaxiOut: string, Distance: int, IsDelayed: int]\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\n|Year|Month|DayofMonth|DayOfWeek|CRSDepTime|UniqueCarrier|FlightNum|DepDelay|Origin|Dest|TaxiIn|TaxiOut|Distance|IsDelayed|\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\n|2008|    1|         3|        4|      1955|           WN|      335|       8|   IAD| TPA|     4|      8|     810|        0|\n|2008|    1|         3|        4|       735|           WN|     3231|      19|   IAD| TPA|     5|     10|     810|        1|\n|2008|    1|         3|        4|       620|           WN|      448|       8|   IND| BWI|     3|     17|     515|        0|\n|2008|    1|         3|        4|       930|           WN|     1746|      -4|   IND| BWI|     3|      7|     515|        0|\n|2008|    1|         3|        4|      1755|           WN|     3920|      34|   IND| BWI|     3|     10|     515|        1|\n|2008|    1|         3|        4|      1915|           WN|      378|      25|   IND| JAX|     4|     10|     688|        1|\n|2008|    1|         3|        4|      1830|           WN|      509|      67|   IND| LAS|     3|      7|    1591|        1|\n|2008|    1|         3|        4|      1040|           WN|      535|      -1|   IND| LAS|     7|      7|    1591|        0|\n|2008|    1|         3|        4|       615|           WN|       11|       2|   IND| MCI|     6|     19|     451|        0|\n|2008|    1|         3|        4|      1620|           WN|      810|       0|   IND| MCI|     3|      6|     451|        0|\n|2008|    1|         3|        4|       700|           WN|      100|       6|   IND| MCO|     5|     19|     828|        0|\n|2008|    1|         3|        4|      1510|           WN|     1333|      94|   IND| MCO|     6|      8|     828|        1|\n|2008|    1|         3|        4|      1430|           WN|      829|      -4|   IND| MDW|     9|     12|     162|        0|\n|2008|    1|         3|        4|       715|           WN|     1016|       0|   IND| MDW|     7|     21|     162|        0|\n|2008|    1|         3|        4|      1700|           WN|     1827|       2|   IND| MDW|     4|     10|     162|        0|\n|2008|    1|         3|        4|      1020|           WN|     2272|       9|   IND| MDW|     6|      9|     162|        0|\n|2008|    1|         3|        4|      1425|           WN|      675|      27|   IND| PHX|     7|      8|    1489|        1|\n|2008|    1|         3|        4|       745|           WN|     1144|       9|   IND| PHX|     5|     16|    1489|        0|\n|2008|    1|         3|        4|      1255|           WN|        4|      28|   IND| TPA|     4|      9|     838|        1|\n|2008|    1|         3|        4|      1325|           WN|       54|      51|   ISP| BWI|     2|      5|     220|        1|\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "updatedDF: org.apache.spark.sql.DataFrame \u003d [Year: int, Month: int, DayofMonth: int, DayOfWeek: int, CRSDepTime: int, UniqueCarrier: string, FlightNum: int, DepDelay: string, Origin: string, Dest: string, TaxiIn: string, TaxiOut: string, Distance: int, IsDelayed: int]\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\n|Year|Month|DayofMonth|DayOfWeek|CRSDepTime|UniqueCarrier|FlightNum|DepDelay|Origin|Dest|TaxiIn|TaxiOut|Distance|IsDelayed|\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\n|2008|    1|         3|        4|      1955|           WN|      335|       8|   IAD| TPA|     4|      8|     810|        0|\n|2008|    1|         3|        4|       735|           WN|     3231|      19|   IAD| TPA|     5|     10|     810|        1|\n|2008|    1|         3|        4|       620|           WN|      448|       8|   IND| BWI|     3|     17|     515|        0|\n|2008|    1|         3|        4|       930|           WN|     1746|      -4|   IND| BWI|     3|      7|     515|        0|\n|2008|    1|         3|        4|      1755|           WN|     3920|      34|   IND| BWI|     3|     10|     515|        1|\n|2008|    1|         3|        4|      1915|           WN|      378|      25|   IND| JAX|     4|     10|     688|        1|\n|2008|    1|         3|        4|      1830|           WN|      509|      67|   IND| LAS|     3|      7|    1591|        1|\n|2008|    1|         3|        4|      1040|           WN|      535|      -1|   IND| LAS|     7|      7|    1591|        0|\n|2008|    1|         3|        4|       615|           WN|       11|       2|   IND| MCI|     6|     19|     451|        0|\n|2008|    1|         3|        4|      1620|           WN|      810|       0|   IND| MCI|     3|      6|     451|        0|\n|2008|    1|         3|        4|       700|           WN|      100|       6|   IND| MCO|     5|     19|     828|        0|\n|2008|    1|         3|        4|      1510|           WN|     1333|      94|   IND| MCO|     6|      8|     828|        1|\n|2008|    1|         3|        4|      1430|           WN|      829|      -4|   IND| MDW|     9|     12|     162|        0|\n|2008|    1|         3|        4|       715|           WN|     1016|       0|   IND| MDW|     7|     21|     162|        0|\n|2008|    1|         3|        4|      1700|           WN|     1827|       2|   IND| MDW|     4|     10|     162|        0|\n|2008|    1|         3|        4|      1020|           WN|     2272|       9|   IND| MDW|     6|      9|     162|        0|\n|2008|    1|         3|        4|      1425|           WN|      675|      27|   IND| PHX|     7|      8|    1489|        1|\n|2008|    1|         3|        4|       745|           WN|     1144|       9|   IND| PHX|     5|     16|    1489|        0|\n|2008|    1|         3|        4|      1255|           WN|        4|      28|   IND| TPA|     4|      9|     838|        1|\n|2008|    1|         3|        4|      1325|           WN|       54|      51|   ISP| BWI|     2|      5|     220|        1|\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\nonly showing top 20 rows\n\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383667_1236904879",
      "id": "20160410-003138_62081836",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Calculate Percentage of Delayed Flights",
      "text": "%spark.spark\nupdatedDF.agg((sum(\"IsDelayed\") * 100 / count(\"DepDelay\")).alias(\"Percentage of Delayed Flights\")).show",
      "dateUpdated": "Mar 9, 2017 1:10:08 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-----------------------------+\n|Percentage of Delayed Flights|\n+-----------------------------+\n|                       19.587|\n+-----------------------------+\n\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "+-----------------------------+\n|Percentage of Delayed Flights|\n+-----------------------------+\n|                       19.587|\n+-----------------------------+\n\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383667_1236904879",
      "id": "20160410-003138_1879848857",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Find Avg Taxi-out",
      "text": "%spark.spark\n// Show only Origin, Dest, and TaxiOut columns\nupdatedDF.select(\"Origin\", \"Dest\", \"TaxiOut\").groupBy(\"Origin\", \"Dest\").agg(avg(\"TaxiOut\").alias(\"AvgTaxiOut\")).orderBy(desc(\"AvgTaxiOut\")).show(10)",
      "dateUpdated": "Mar 9, 2017 1:10:08 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------+----+----------+\n|Origin|Dest|AvgTaxiOut|\n+------+----+----------+\n|   LCH| IAH|      84.0|\n|   EWR| BHM|      63.0|\n|   EWR| SDF|      45.0|\n|   EWR| GSO|      36.5|\n|   MHT| CLE|      33.0|\n|   EWR| JAX|      28.0|\n|   CLE| SDF|      27.0|\n|   EWR| DTW|      27.0|\n|   ORD| EWR|      26.0|\n|   EWR| MCI|      26.0|\n+------+----+----------+\nonly showing top 10 rows\n\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "+------+----+----------+\n|Origin|Dest|AvgTaxiOut|\n+------+----+----------+\n|   LCH| IAH|      84.0|\n|   EWR| BHM|      63.0|\n|   EWR| SDF|      45.0|\n|   EWR| GSO|      36.5|\n|   MHT| CLE|      33.0|\n|   EWR| JAX|      28.0|\n|   CLE| SDF|      27.0|\n|   EWR| DTW|      27.0|\n|   ORD| EWR|      26.0|\n|   EWR| MCI|      26.0|\n+------+----+----------+\nonly showing top 10 rows\n\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383667_1236904879",
      "id": "20160410-003138_840324935",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Find Avg Taxi-in",
      "text": "%spark.spark\n// Let\u0027s find average TaxiIn\n// by showing only Origin, Dest, and TaxiIn columns\n// and using aggregate functions on the updatedDF DataFrame to complete the code\n\nupdatedDF.select(\"Origin\", \"Dest\", \"TaxiIn\").groupBy(\"Origin\", \"Dest\").agg(avg(\"TaxiIn\").alias(\"AvgTaxiIn\")).orderBy(desc(\"AvgTaxiIn\")).show(10)",
      "dateUpdated": "Mar 9, 2017 1:10:45 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------+----+------------------+\n|Origin|Dest|         AvgTaxiIn|\n+------+----+------------------+\n|   CLT| IAH|              22.0|\n|   IAH| ABQ|              18.0|\n|   MCI| IAH|14.666666666666666|\n|   BHM| EWR|              13.0|\n|   SMF| GEG|12.462962962962964|\n|   CRW| IAH|              12.0|\n|   MHT| CLE|              12.0|\n|   IAH| JAX|              11.0|\n|   ONT| COS|10.903225806451612|\n|   SMF| COS|10.610169491525424|\n+------+----+------------------+\nonly showing top 10 rows\n\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "+------+----+------------------+\n|Origin|Dest|         AvgTaxiIn|\n+------+----+------------------+\n|   CLT| IAH|              22.0|\n|   IAH| ABQ|              18.0|\n|   MCI| IAH|14.666666666666666|\n|   BHM| EWR|              13.0|\n|   SMF| GEG|12.462962962962964|\n|   CRW| IAH|              12.0|\n|   MHT| CLE|              12.0|\n|   IAH| JAX|              11.0|\n|   ONT| COS|10.903225806451612|\n|   SMF| COS|10.610169491525424|\n+------+----+------------------+\nonly showing top 10 rows\n\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383667_1236904879",
      "id": "20160410-003138_1488719873",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Part 2: Using SQL to Analyze the Airline Dataset",
      "dateUpdated": "Nov 18, 2016 12:29:43 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ]
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003ePart 2: Using SQL to Analyze the Airline Dataset\u003c/h3\u003e\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003ePart 2: Using SQL to Analyze the Airline Dataset\u003c/h3\u003e\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383667_1236904879",
      "id": "20160410-003138_582934314",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "%md\nNow let\u0027s use SQL statements to analyze our dataset.",
      "dateUpdated": "Nov 18, 2016 12:29:43 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "title": false,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ]
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eNow let\u0027s use SQL statements to analyze our dataset.\u003c/p\u003e\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eNow let\u0027s use SQL statements to analyze our dataset.\u003c/p\u003e\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383667_1236904879",
      "id": "20160410-003138_556617784",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Register a Temporary Table",
      "text": "%spark.spark\n// Convert DataFrame to a Temporary Table\nupdatedDF.registerTempTable(\"flightsTempTbl\")",
      "dateUpdated": "Mar 9, 2017 1:10:45 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [],
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "apps": [],
      "jobName": "paragraph_1479452383667_1236904879",
      "id": "20160410-003138_636329356",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Preview Table",
      "text": "%spark.sql\n\nSELECT * FROM flightsTempTbl LIMIT 10",
      "dateUpdated": "Mar 9, 2017 1:10:45 PM",
      "config": {
        "editorMode": "ace/mode/sql",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "Year\tMonth\tDayofMonth\tDayOfWeek\tCRSDepTime\tUniqueCarrier\tFlightNum\tDepDelay\tOrigin\tDest\tTaxiIn\tTaxiOut\tDistance\tIsDelayed\n2008\t1\t3\t4\t1955\tWN\t335\t8\tIAD\tTPA\t4\t8\t810\t0\n2008\t1\t3\t4\t735\tWN\t3231\t19\tIAD\tTPA\t5\t10\t810\t1\n2008\t1\t3\t4\t620\tWN\t448\t8\tIND\tBWI\t3\t17\t515\t0\n2008\t1\t3\t4\t930\tWN\t1746\t-4\tIND\tBWI\t3\t7\t515\t0\n2008\t1\t3\t4\t1755\tWN\t3920\t34\tIND\tBWI\t3\t10\t515\t1\n2008\t1\t3\t4\t1915\tWN\t378\t25\tIND\tJAX\t4\t10\t688\t1\n2008\t1\t3\t4\t1830\tWN\t509\t67\tIND\tLAS\t3\t7\t1591\t1\n2008\t1\t3\t4\t1040\tWN\t535\t-1\tIND\tLAS\t7\t7\t1591\t0\n2008\t1\t3\t4\t615\tWN\t11\t2\tIND\tMCI\t6\t19\t451\t0\n2008\t1\t3\t4\t1620\tWN\t810\t0\tIND\tMCI\t3\t6\t451\t0\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "Year\tMonth\tDayofMonth\tDayOfWeek\tCRSDepTime\tUniqueCarrier\tFlightNum\tDepDelay\tOrigin\tDest\tTaxiIn\tTaxiOut\tDistance\tIsDelayed\n2008\t1\t3\t4\t1955\tWN\t335\t8\tIAD\tTPA\t4\t8\t810\t0\n2008\t1\t3\t4\t735\tWN\t3231\t19\tIAD\tTPA\t5\t10\t810\t1\n2008\t1\t3\t4\t620\tWN\t448\t8\tIND\tBWI\t3\t17\t515\t0\n2008\t1\t3\t4\t930\tWN\t1746\t-4\tIND\tBWI\t3\t7\t515\t0\n2008\t1\t3\t4\t1755\tWN\t3920\t34\tIND\tBWI\t3\t10\t515\t1\n2008\t1\t3\t4\t1915\tWN\t378\t25\tIND\tJAX\t4\t10\t688\t1\n2008\t1\t3\t4\t1830\tWN\t509\t67\tIND\tLAS\t3\t7\t1591\t1\n2008\t1\t3\t4\t1040\tWN\t535\t-1\tIND\tLAS\t7\t7\t1591\t0\n2008\t1\t3\t4\t615\tWN\t11\t2\tIND\tMCI\t6\t19\t451\t0\n2008\t1\t3\t4\t1620\tWN\t810\t0\tIND\tMCI\t3\t6\t451\t0\n",
        "comment": "",
        "msgTable": [
          [
            {
              "key": "Month",
              "value": "2008"
            },
            {
              "key": "Month",
              "value": "1"
            },
            {
              "key": "Month",
              "value": "3"
            },
            {
              "key": "Month",
              "value": "4"
            },
            {
              "key": "Month",
              "value": "1955"
            },
            {
              "key": "Month",
              "value": "WN"
            },
            {
              "key": "Month",
              "value": "335"
            },
            {
              "key": "Month",
              "value": "8"
            },
            {
              "key": "Month",
              "value": "IAD"
            },
            {
              "key": "Month",
              "value": "TPA"
            },
            {
              "key": "Month",
              "value": "4"
            },
            {
              "key": "Month",
              "value": "8"
            },
            {
              "key": "Month",
              "value": "810"
            },
            {
              "key": "Month",
              "value": "0"
            }
          ],
          [
            {
              "key": "DayofMonth",
              "value": "2008"
            },
            {
              "key": "DayofMonth",
              "value": "1"
            },
            {
              "key": "DayofMonth",
              "value": "3"
            },
            {
              "key": "DayofMonth",
              "value": "4"
            },
            {
              "key": "DayofMonth",
              "value": "735"
            },
            {
              "key": "DayofMonth",
              "value": "WN"
            },
            {
              "key": "DayofMonth",
              "value": "3231"
            },
            {
              "key": "DayofMonth",
              "value": "19"
            },
            {
              "key": "DayofMonth",
              "value": "IAD"
            },
            {
              "key": "DayofMonth",
              "value": "TPA"
            },
            {
              "key": "DayofMonth",
              "value": "5"
            },
            {
              "key": "DayofMonth",
              "value": "10"
            },
            {
              "key": "DayofMonth",
              "value": "810"
            },
            {
              "key": "DayofMonth",
              "value": "1"
            }
          ],
          [
            {
              "key": "DayOfWeek",
              "value": "2008"
            },
            {
              "key": "DayOfWeek",
              "value": "1"
            },
            {
              "key": "DayOfWeek",
              "value": "3"
            },
            {
              "key": "DayOfWeek",
              "value": "4"
            },
            {
              "key": "DayOfWeek",
              "value": "620"
            },
            {
              "key": "DayOfWeek",
              "value": "WN"
            },
            {
              "key": "DayOfWeek",
              "value": "448"
            },
            {
              "key": "DayOfWeek",
              "value": "8"
            },
            {
              "key": "DayOfWeek",
              "value": "IND"
            },
            {
              "key": "DayOfWeek",
              "value": "BWI"
            },
            {
              "key": "DayOfWeek",
              "value": "3"
            },
            {
              "key": "DayOfWeek",
              "value": "17"
            },
            {
              "key": "DayOfWeek",
              "value": "515"
            },
            {
              "key": "DayOfWeek",
              "value": "0"
            }
          ],
          [
            {
              "key": "CRSDepTime",
              "value": "2008"
            },
            {
              "key": "CRSDepTime",
              "value": "1"
            },
            {
              "key": "CRSDepTime",
              "value": "3"
            },
            {
              "key": "CRSDepTime",
              "value": "4"
            },
            {
              "key": "CRSDepTime",
              "value": "930"
            },
            {
              "key": "CRSDepTime",
              "value": "WN"
            },
            {
              "key": "CRSDepTime",
              "value": "1746"
            },
            {
              "key": "CRSDepTime",
              "value": "-4"
            },
            {
              "key": "CRSDepTime",
              "value": "IND"
            },
            {
              "key": "CRSDepTime",
              "value": "BWI"
            },
            {
              "key": "CRSDepTime",
              "value": "3"
            },
            {
              "key": "CRSDepTime",
              "value": "7"
            },
            {
              "key": "CRSDepTime",
              "value": "515"
            },
            {
              "key": "CRSDepTime",
              "value": "0"
            }
          ],
          [
            {
              "key": "UniqueCarrier",
              "value": "2008"
            },
            {
              "key": "UniqueCarrier",
              "value": "1"
            },
            {
              "key": "UniqueCarrier",
              "value": "3"
            },
            {
              "key": "UniqueCarrier",
              "value": "4"
            },
            {
              "key": "UniqueCarrier",
              "value": "1755"
            },
            {
              "key": "UniqueCarrier",
              "value": "WN"
            },
            {
              "key": "UniqueCarrier",
              "value": "3920"
            },
            {
              "key": "UniqueCarrier",
              "value": "34"
            },
            {
              "key": "UniqueCarrier",
              "value": "IND"
            },
            {
              "key": "UniqueCarrier",
              "value": "BWI"
            },
            {
              "key": "UniqueCarrier",
              "value": "3"
            },
            {
              "key": "UniqueCarrier",
              "value": "10"
            },
            {
              "key": "UniqueCarrier",
              "value": "515"
            },
            {
              "key": "UniqueCarrier",
              "value": "1"
            }
          ],
          [
            {
              "key": "FlightNum",
              "value": "2008"
            },
            {
              "key": "FlightNum",
              "value": "1"
            },
            {
              "key": "FlightNum",
              "value": "3"
            },
            {
              "key": "FlightNum",
              "value": "4"
            },
            {
              "key": "FlightNum",
              "value": "1915"
            },
            {
              "key": "FlightNum",
              "value": "WN"
            },
            {
              "key": "FlightNum",
              "value": "378"
            },
            {
              "key": "FlightNum",
              "value": "25"
            },
            {
              "key": "FlightNum",
              "value": "IND"
            },
            {
              "key": "FlightNum",
              "value": "JAX"
            },
            {
              "key": "FlightNum",
              "value": "4"
            },
            {
              "key": "FlightNum",
              "value": "10"
            },
            {
              "key": "FlightNum",
              "value": "688"
            },
            {
              "key": "FlightNum",
              "value": "1"
            }
          ],
          [
            {
              "key": "DepDelay",
              "value": "2008"
            },
            {
              "key": "DepDelay",
              "value": "1"
            },
            {
              "key": "DepDelay",
              "value": "3"
            },
            {
              "key": "DepDelay",
              "value": "4"
            },
            {
              "key": "DepDelay",
              "value": "1830"
            },
            {
              "key": "DepDelay",
              "value": "WN"
            },
            {
              "key": "DepDelay",
              "value": "509"
            },
            {
              "key": "DepDelay",
              "value": "67"
            },
            {
              "key": "DepDelay",
              "value": "IND"
            },
            {
              "key": "DepDelay",
              "value": "LAS"
            },
            {
              "key": "DepDelay",
              "value": "3"
            },
            {
              "key": "DepDelay",
              "value": "7"
            },
            {
              "key": "DepDelay",
              "value": "1591"
            },
            {
              "key": "DepDelay",
              "value": "1"
            }
          ],
          [
            {
              "key": "Origin",
              "value": "2008"
            },
            {
              "key": "Origin",
              "value": "1"
            },
            {
              "key": "Origin",
              "value": "3"
            },
            {
              "key": "Origin",
              "value": "4"
            },
            {
              "key": "Origin",
              "value": "1040"
            },
            {
              "key": "Origin",
              "value": "WN"
            },
            {
              "key": "Origin",
              "value": "535"
            },
            {
              "key": "Origin",
              "value": "-1"
            },
            {
              "key": "Origin",
              "value": "IND"
            },
            {
              "key": "Origin",
              "value": "LAS"
            },
            {
              "key": "Origin",
              "value": "7"
            },
            {
              "key": "Origin",
              "value": "7"
            },
            {
              "key": "Origin",
              "value": "1591"
            },
            {
              "key": "Origin",
              "value": "0"
            }
          ],
          [
            {
              "key": "Dest",
              "value": "2008"
            },
            {
              "key": "Dest",
              "value": "1"
            },
            {
              "key": "Dest",
              "value": "3"
            },
            {
              "key": "Dest",
              "value": "4"
            },
            {
              "key": "Dest",
              "value": "615"
            },
            {
              "key": "Dest",
              "value": "WN"
            },
            {
              "key": "Dest",
              "value": "11"
            },
            {
              "key": "Dest",
              "value": "2"
            },
            {
              "key": "Dest",
              "value": "IND"
            },
            {
              "key": "Dest",
              "value": "MCI"
            },
            {
              "key": "Dest",
              "value": "6"
            },
            {
              "key": "Dest",
              "value": "19"
            },
            {
              "key": "Dest",
              "value": "451"
            },
            {
              "key": "Dest",
              "value": "0"
            }
          ],
          [
            {
              "key": "TaxiIn",
              "value": "2008"
            },
            {
              "key": "TaxiIn",
              "value": "1"
            },
            {
              "key": "TaxiIn",
              "value": "3"
            },
            {
              "key": "TaxiIn",
              "value": "4"
            },
            {
              "key": "TaxiIn",
              "value": "1620"
            },
            {
              "key": "TaxiIn",
              "value": "WN"
            },
            {
              "key": "TaxiIn",
              "value": "810"
            },
            {
              "key": "TaxiIn",
              "value": "0"
            },
            {
              "key": "TaxiIn",
              "value": "IND"
            },
            {
              "key": "TaxiIn",
              "value": "MCI"
            },
            {
              "key": "TaxiIn",
              "value": "3"
            },
            {
              "key": "TaxiIn",
              "value": "6"
            },
            {
              "key": "TaxiIn",
              "value": "451"
            },
            {
              "key": "TaxiIn",
              "value": "0"
            }
          ]
        ],
        "columnNames": [
          {
            "name": "Year",
            "index": 0.0,
            "aggr": "sum"
          },
          {
            "name": "Month",
            "index": 1.0,
            "aggr": "sum"
          },
          {
            "name": "DayofMonth",
            "index": 2.0,
            "aggr": "sum"
          },
          {
            "name": "DayOfWeek",
            "index": 3.0,
            "aggr": "sum"
          },
          {
            "name": "CRSDepTime",
            "index": 4.0,
            "aggr": "sum"
          },
          {
            "name": "UniqueCarrier",
            "index": 5.0,
            "aggr": "sum"
          },
          {
            "name": "FlightNum",
            "index": 6.0,
            "aggr": "sum"
          },
          {
            "name": "DepDelay",
            "index": 7.0,
            "aggr": "sum"
          },
          {
            "name": "Origin",
            "index": 8.0,
            "aggr": "sum"
          },
          {
            "name": "Dest",
            "index": 9.0,
            "aggr": "sum"
          },
          {
            "name": "TaxiIn",
            "index": 10.0,
            "aggr": "sum"
          },
          {
            "name": "TaxiOut",
            "index": 11.0,
            "aggr": "sum"
          },
          {
            "name": "Distance",
            "index": 12.0,
            "aggr": "sum"
          },
          {
            "name": "IsDelayed",
            "index": 13.0,
            "aggr": "sum"
          }
        ],
        "rows": [
          [
            "2008",
            "1",
            "3",
            "4",
            "1955",
            "WN",
            "335",
            "8",
            "IAD",
            "TPA",
            "4",
            "8",
            "810",
            "0"
          ],
          [
            "2008",
            "1",
            "3",
            "4",
            "735",
            "WN",
            "3231",
            "19",
            "IAD",
            "TPA",
            "5",
            "10",
            "810",
            "1"
          ],
          [
            "2008",
            "1",
            "3",
            "4",
            "620",
            "WN",
            "448",
            "8",
            "IND",
            "BWI",
            "3",
            "17",
            "515",
            "0"
          ],
          [
            "2008",
            "1",
            "3",
            "4",
            "930",
            "WN",
            "1746",
            "-4",
            "IND",
            "BWI",
            "3",
            "7",
            "515",
            "0"
          ],
          [
            "2008",
            "1",
            "3",
            "4",
            "1755",
            "WN",
            "3920",
            "34",
            "IND",
            "BWI",
            "3",
            "10",
            "515",
            "1"
          ],
          [
            "2008",
            "1",
            "3",
            "4",
            "1915",
            "WN",
            "378",
            "25",
            "IND",
            "JAX",
            "4",
            "10",
            "688",
            "1"
          ],
          [
            "2008",
            "1",
            "3",
            "4",
            "1830",
            "WN",
            "509",
            "67",
            "IND",
            "LAS",
            "3",
            "7",
            "1591",
            "1"
          ],
          [
            "2008",
            "1",
            "3",
            "4",
            "1040",
            "WN",
            "535",
            "-1",
            "IND",
            "LAS",
            "7",
            "7",
            "1591",
            "0"
          ],
          [
            "2008",
            "1",
            "3",
            "4",
            "615",
            "WN",
            "11",
            "2",
            "IND",
            "MCI",
            "6",
            "19",
            "451",
            "0"
          ],
          [
            "2008",
            "1",
            "3",
            "4",
            "1620",
            "WN",
            "810",
            "0",
            "IND",
            "MCI",
            "3",
            "6",
            "451",
            "0"
          ]
        ]
      },
      "apps": [],
      "jobName": "paragraph_1479452383667_1236904879",
      "id": "20160410-003138_318924232",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Register UDF",
      "text": "%spark.spark\n// Register a UDF to find delayed flights\n// Note that this is a UDF specific for use within the sqlContext\n\n// Assume:\n//  if ArrDelay is not available then Delayed \u003d False\n//  if ArrDelay \u003e 15 min then Delayed \u003d True else False\n\nsqlContext.udf.register(\"isDelayedUDF\", (time: String) \u003d\u003e if (time \u003d\u003d \"NA\") 0 else if (time.toInt \u003e 15) 1 else 0)",
      "dateUpdated": "Mar 9, 2017 1:11:48 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res32: org.apache.spark.sql.UserDefinedFunction \u003d UserDefinedFunction(\u003cfunction1\u003e,IntegerType,List(StringType))\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res32: org.apache.spark.sql.UserDefinedFunction \u003d UserDefinedFunction(\u003cfunction1\u003e,IntegerType,List(StringType))\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383668_1234981135",
      "id": "20160410-003138_40384312",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Compare Total Number of Delayed Flights by Carrier",
      "text": "%spark.sql\n\nSELECT UniqueCarrier, SUM(isDelayedUDF(DepDelay)) AS NumDelays FROM flightsTempTbl GROUP BY UniqueCarrier",
      "dateUpdated": "Mar 9, 2017 1:11:48 PM",
      "config": {
        "editorMode": "ace/mode/sql",
        "colWidth": 6.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "pieChart",
              "height": 296.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "UniqueCarrier",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "NumDelays",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "yAxis": {
                  "name": "NumDelays",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "UniqueCarrier\tNumDelays\nWN\t18573\nXE\t1014\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "UniqueCarrier\tNumDelays\nWN\t18573\nXE\t1014\n",
        "comment": "",
        "msgTable": [
          [
            {
              "key": "NumDelays",
              "value": "WN"
            },
            {
              "key": "NumDelays",
              "value": "18573"
            }
          ],
          [
            {
              "value": "XE"
            },
            {
              "value": "1014"
            }
          ]
        ],
        "columnNames": [
          {
            "name": "UniqueCarrier",
            "index": 0.0,
            "aggr": "sum"
          },
          {
            "name": "NumDelays",
            "index": 1.0,
            "aggr": "sum"
          }
        ],
        "rows": [
          [
            "WN",
            "18573"
          ],
          [
            "XE",
            "1014"
          ]
        ]
      },
      "apps": [],
      "jobName": "paragraph_1479452383668_1234981135",
      "id": "20160410-003138_134299332",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Compare Total Delayed Time (min) by Carrier",
      "text": "%spark.sql\n\nSELECT UniqueCarrier, SUM(DepDelay) AS TotalTimeDelay FROM flightsTempTbl GROUP BY UniqueCarrier",
      "dateUpdated": "Mar 9, 2017 1:11:48 PM",
      "config": {
        "editorMode": "ace/mode/sql",
        "colWidth": 6.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "UniqueCarrier",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "TotalTimeDelay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "UniqueCarrier",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "TotalTimeDelay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "UniqueCarrier\tTotalTimeDelay\nWN\t978547.0\nXE\t47505.0\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "UniqueCarrier\tTotalTimeDelay\nWN\t978547.0\nXE\t47505.0\n",
        "comment": "",
        "msgTable": [
          [
            {
              "key": "TotalTimeDelay",
              "value": "WN"
            },
            {
              "key": "TotalTimeDelay",
              "value": "978547.0"
            }
          ],
          [
            {
              "value": "XE"
            },
            {
              "value": "47505.0"
            }
          ]
        ],
        "columnNames": [
          {
            "name": "UniqueCarrier",
            "index": 0.0,
            "aggr": "sum"
          },
          {
            "name": "TotalTimeDelay",
            "index": 1.0,
            "aggr": "sum"
          }
        ],
        "rows": [
          [
            "WN",
            "978547.0"
          ],
          [
            "XE",
            "47505.0"
          ]
        ]
      },
      "apps": [],
      "jobName": "paragraph_1479452383668_1234981135",
      "id": "20160410-003138_163559927",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Find Average Distance Travelled by Carrier",
      "text": "%spark.sql\n\n-- Find average distance by UniqueCarrier from flightsTempTbl\n-- order descending by average distance\n\nSELECT UniqueCarrier, avg(Distance) AS AvgDistanceTraveled FROM flightsTempTbl GROUP BY UniqueCarrier ORDER BY AvgDistanceTraveled DESC",
      "dateUpdated": "Mar 9, 2017 1:11:48 PM",
      "config": {
        "editorMode": "ace/mode/sql",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "UniqueCarrier\tAvgDistanceTraveled\nXE\t738.0677880571909\nWN\t623.7926638668864\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "UniqueCarrier\tAvgDistanceTraveled\nXE\t738.0677880571909\nWN\t623.7926638668864\n",
        "comment": "",
        "msgTable": [
          [
            {
              "key": "AvgDistanceTraveled",
              "value": "XE"
            },
            {
              "key": "AvgDistanceTraveled",
              "value": "738.0677880571909"
            }
          ],
          [
            {
              "value": "WN"
            },
            {
              "value": "623.7926638668864"
            }
          ]
        ],
        "columnNames": [
          {
            "name": "UniqueCarrier",
            "index": 0.0,
            "aggr": "sum"
          },
          {
            "name": "AvgDistanceTraveled",
            "index": 1.0,
            "aggr": "sum"
          }
        ],
        "rows": [
          [
            "XE",
            "738.0677880571909"
          ],
          [
            "WN",
            "623.7926638668864"
          ]
        ]
      },
      "apps": [],
      "jobName": "paragraph_1479452383668_1234981135",
      "id": "20160410-003138_172624929",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Find Out When Most Flights Get Delayed by Day of Week",
      "text": "%spark.sql\n\nSELECT DayOfWeek, CASE WHEN isDelayedUDF(DepDelay) \u003d 1 THEN \u0027delayed\u0027 ELSE \u0027ok\u0027 END AS Delay, COUNT(1) AS Count\nFROM flightsTempTbl\nGROUP BY DayOfWeek, CASE WHEN isDelayedUDF(DepDelay) \u003d 1 THEN \u0027delayed\u0027 ELSE \u0027ok\u0027 END\nORDER BY DayOfWeek",
      "dateUpdated": "Mar 9, 2017 1:13:03 PM",
      "config": {
        "editorMode": "ace/mode/sql",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "DayOfWeek",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "Count",
                  "index": 2.0,
                  "aggr": "sum"
                }
              ],
              "groups": [
                {
                  "name": "Delay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "scatter": {
                "xAxis": {
                  "name": "DayOfWeek",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "Delay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "DayOfWeek\tDelay\tCount\n1\tdelayed\t2656\n1\tok\t11863\n2\tdelayed\t1799\n2\tok\t12911\n3\tdelayed\t1434\n3\tok\t13260\n4\tok\t12271\n4\tdelayed\t4808\n5\tok\t11003\n5\tdelayed\t3514\n6\tdelayed\t1878\n6\tok\t9407\n7\tok\t9698\n7\tdelayed\t3498\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "DayOfWeek\tDelay\tCount\n1\tdelayed\t2656\n1\tok\t11863\n2\tdelayed\t1799\n2\tok\t12911\n3\tdelayed\t1434\n3\tok\t13260\n4\tok\t12271\n4\tdelayed\t4808\n5\tok\t11003\n5\tdelayed\t3514\n6\tdelayed\t1878\n6\tok\t9407\n7\tok\t9698\n7\tdelayed\t3498\n",
        "comment": "",
        "msgTable": [
          [
            {
              "key": "Delay",
              "value": "1"
            },
            {
              "key": "Delay",
              "value": "delayed"
            },
            {
              "key": "Delay",
              "value": "2656"
            }
          ],
          [
            {
              "key": "Count",
              "value": "1"
            },
            {
              "key": "Count",
              "value": "ok"
            },
            {
              "key": "Count",
              "value": "11863"
            }
          ],
          [
            {
              "value": "2"
            },
            {
              "value": "delayed"
            },
            {
              "value": "1799"
            }
          ],
          [
            {
              "value": "2"
            },
            {
              "value": "ok"
            },
            {
              "value": "12911"
            }
          ],
          [
            {
              "value": "3"
            },
            {
              "value": "delayed"
            },
            {
              "value": "1434"
            }
          ],
          [
            {
              "value": "3"
            },
            {
              "value": "ok"
            },
            {
              "value": "13260"
            }
          ],
          [
            {
              "value": "4"
            },
            {
              "value": "ok"
            },
            {
              "value": "12271"
            }
          ],
          [
            {
              "value": "4"
            },
            {
              "value": "delayed"
            },
            {
              "value": "4808"
            }
          ],
          [
            {
              "value": "5"
            },
            {
              "value": "ok"
            },
            {
              "value": "11003"
            }
          ],
          [
            {
              "value": "5"
            },
            {
              "value": "delayed"
            },
            {
              "value": "3514"
            }
          ],
          [
            {
              "value": "6"
            },
            {
              "value": "delayed"
            },
            {
              "value": "1878"
            }
          ],
          [
            {
              "value": "6"
            },
            {
              "value": "ok"
            },
            {
              "value": "9407"
            }
          ],
          [
            {
              "value": "7"
            },
            {
              "value": "ok"
            },
            {
              "value": "9698"
            }
          ],
          [
            {
              "value": "7"
            },
            {
              "value": "delayed"
            },
            {
              "value": "3498"
            }
          ]
        ],
        "columnNames": [
          {
            "name": "DayOfWeek",
            "index": 0.0,
            "aggr": "sum"
          },
          {
            "name": "Delay",
            "index": 1.0,
            "aggr": "sum"
          },
          {
            "name": "Count",
            "index": 2.0,
            "aggr": "sum"
          }
        ],
        "rows": [
          [
            "1",
            "delayed",
            "2656"
          ],
          [
            "1",
            "ok",
            "11863"
          ],
          [
            "2",
            "delayed",
            "1799"
          ],
          [
            "2",
            "ok",
            "12911"
          ],
          [
            "3",
            "delayed",
            "1434"
          ],
          [
            "3",
            "ok",
            "13260"
          ],
          [
            "4",
            "ok",
            "12271"
          ],
          [
            "4",
            "delayed",
            "4808"
          ],
          [
            "5",
            "ok",
            "11003"
          ],
          [
            "5",
            "delayed",
            "3514"
          ],
          [
            "6",
            "delayed",
            "1878"
          ],
          [
            "6",
            "ok",
            "9407"
          ],
          [
            "7",
            "ok",
            "9698"
          ],
          [
            "7",
            "delayed",
            "3498"
          ]
        ]
      },
      "apps": [],
      "jobName": "paragraph_1479452383668_1234981135",
      "id": "20160410-003138_56774606",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Find Out When Most Flights Get Delayed by Hour",
      "text": "%spark.sql\n\nSELECT CAST(CRSDepTime / 100 AS INT) AS Hour, CASE WHEN isDelayedUDF(DepDelay) \u003d 1 THEN \u0027delayed\u0027 ELSE \u0027ok\u0027 END AS Delay, COUNT(1) AS Count\nFROM flightsTempTbl\nGROUP BY CAST(CRSDepTime / 100 AS INT), CASE WHEN isDelayedUDF(DepDelay) \u003d 1 THEN \u0027delayed\u0027 ELSE \u0027ok\u0027 END\nORDER BY Hour",
      "dateUpdated": "Mar 9, 2017 1:13:03 PM",
      "config": {
        "editorMode": "ace/mode/sql",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "Hour",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "Count",
                  "index": 2.0,
                  "aggr": "sum"
                }
              ],
              "groups": [
                {
                  "name": "Delay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "scatter": {
                "xAxis": {
                  "name": "Hour",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "Delay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "Hour\tDelay\tCount\n6\tdelayed\t208\n6\tok\t6126\n7\tok\t7274\n7\tdelayed\t372\n8\tok\t5956\n8\tdelayed\t547\n9\tok\t5861\n9\tdelayed\t761\n10\tdelayed\t903\n10\tok\t5783\n11\tdelayed\t986\n11\tok\t5115\n12\tok\t5174\n12\tdelayed\t1128\n13\tok\t5225\n13\tdelayed\t1346\n14\tdelayed\t1335\n14\tok\t4434\n15\tdelayed\t1562\n15\tok\t4818\n16\tdelayed\t1750\n16\tok\t4810\n17\tok\t4632\n17\tdelayed\t1802\n18\tok\t4720\n18\tdelayed\t1912\n19\tdelayed\t2001\n19\tok\t4461\n20\tok\t3526\n20\tdelayed\t1684\n21\tok\t2286\n21\tdelayed\t1194\n22\tdelayed\t96\n22\tok\t212\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "Hour\tDelay\tCount\n6\tdelayed\t208\n6\tok\t6126\n7\tok\t7274\n7\tdelayed\t372\n8\tok\t5956\n8\tdelayed\t547\n9\tok\t5861\n9\tdelayed\t761\n10\tdelayed\t903\n10\tok\t5783\n11\tdelayed\t986\n11\tok\t5115\n12\tok\t5174\n12\tdelayed\t1128\n13\tok\t5225\n13\tdelayed\t1346\n14\tdelayed\t1335\n14\tok\t4434\n15\tdelayed\t1562\n15\tok\t4818\n16\tdelayed\t1750\n16\tok\t4810\n17\tok\t4632\n17\tdelayed\t1802\n18\tok\t4720\n18\tdelayed\t1912\n19\tdelayed\t2001\n19\tok\t4461\n20\tok\t3526\n20\tdelayed\t1684\n21\tok\t2286\n21\tdelayed\t1194\n22\tdelayed\t96\n22\tok\t212\n",
        "comment": "",
        "msgTable": [
          [
            {
              "key": "Delay",
              "value": "6"
            },
            {
              "key": "Delay",
              "value": "delayed"
            },
            {
              "key": "Delay",
              "value": "208"
            }
          ],
          [
            {
              "key": "Count",
              "value": "6"
            },
            {
              "key": "Count",
              "value": "ok"
            },
            {
              "key": "Count",
              "value": "6126"
            }
          ],
          [
            {
              "value": "7"
            },
            {
              "value": "ok"
            },
            {
              "value": "7274"
            }
          ],
          [
            {
              "value": "7"
            },
            {
              "value": "delayed"
            },
            {
              "value": "372"
            }
          ],
          [
            {
              "value": "8"
            },
            {
              "value": "ok"
            },
            {
              "value": "5956"
            }
          ],
          [
            {
              "value": "8"
            },
            {
              "value": "delayed"
            },
            {
              "value": "547"
            }
          ],
          [
            {
              "value": "9"
            },
            {
              "value": "ok"
            },
            {
              "value": "5861"
            }
          ],
          [
            {
              "value": "9"
            },
            {
              "value": "delayed"
            },
            {
              "value": "761"
            }
          ],
          [
            {
              "value": "10"
            },
            {
              "value": "delayed"
            },
            {
              "value": "903"
            }
          ],
          [
            {
              "value": "10"
            },
            {
              "value": "ok"
            },
            {
              "value": "5783"
            }
          ],
          [
            {
              "value": "11"
            },
            {
              "value": "delayed"
            },
            {
              "value": "986"
            }
          ],
          [
            {
              "value": "11"
            },
            {
              "value": "ok"
            },
            {
              "value": "5115"
            }
          ],
          [
            {
              "value": "12"
            },
            {
              "value": "ok"
            },
            {
              "value": "5174"
            }
          ],
          [
            {
              "value": "12"
            },
            {
              "value": "delayed"
            },
            {
              "value": "1128"
            }
          ],
          [
            {
              "value": "13"
            },
            {
              "value": "ok"
            },
            {
              "value": "5225"
            }
          ],
          [
            {
              "value": "13"
            },
            {
              "value": "delayed"
            },
            {
              "value": "1346"
            }
          ],
          [
            {
              "value": "14"
            },
            {
              "value": "delayed"
            },
            {
              "value": "1335"
            }
          ],
          [
            {
              "value": "14"
            },
            {
              "value": "ok"
            },
            {
              "value": "4434"
            }
          ],
          [
            {
              "value": "15"
            },
            {
              "value": "delayed"
            },
            {
              "value": "1562"
            }
          ],
          [
            {
              "value": "15"
            },
            {
              "value": "ok"
            },
            {
              "value": "4818"
            }
          ],
          [
            {
              "value": "16"
            },
            {
              "value": "delayed"
            },
            {
              "value": "1750"
            }
          ],
          [
            {
              "value": "16"
            },
            {
              "value": "ok"
            },
            {
              "value": "4810"
            }
          ],
          [
            {
              "value": "17"
            },
            {
              "value": "ok"
            },
            {
              "value": "4632"
            }
          ],
          [
            {
              "value": "17"
            },
            {
              "value": "delayed"
            },
            {
              "value": "1802"
            }
          ],
          [
            {
              "value": "18"
            },
            {
              "value": "ok"
            },
            {
              "value": "4720"
            }
          ],
          [
            {
              "value": "18"
            },
            {
              "value": "delayed"
            },
            {
              "value": "1912"
            }
          ],
          [
            {
              "value": "19"
            },
            {
              "value": "delayed"
            },
            {
              "value": "2001"
            }
          ],
          [
            {
              "value": "19"
            },
            {
              "value": "ok"
            },
            {
              "value": "4461"
            }
          ],
          [
            {
              "value": "20"
            },
            {
              "value": "ok"
            },
            {
              "value": "3526"
            }
          ],
          [
            {
              "value": "20"
            },
            {
              "value": "delayed"
            },
            {
              "value": "1684"
            }
          ],
          [
            {
              "value": "21"
            },
            {
              "value": "ok"
            },
            {
              "value": "2286"
            }
          ],
          [
            {
              "value": "21"
            },
            {
              "value": "delayed"
            },
            {
              "value": "1194"
            }
          ],
          [
            {
              "value": "22"
            },
            {
              "value": "delayed"
            },
            {
              "value": "96"
            }
          ],
          [
            {
              "value": "22"
            },
            {
              "value": "ok"
            },
            {
              "value": "212"
            }
          ]
        ],
        "columnNames": [
          {
            "name": "Hour",
            "index": 0.0,
            "aggr": "sum"
          },
          {
            "name": "Delay",
            "index": 1.0,
            "aggr": "sum"
          },
          {
            "name": "Count",
            "index": 2.0,
            "aggr": "sum"
          }
        ],
        "rows": [
          [
            "6",
            "delayed",
            "208"
          ],
          [
            "6",
            "ok",
            "6126"
          ],
          [
            "7",
            "ok",
            "7274"
          ],
          [
            "7",
            "delayed",
            "372"
          ],
          [
            "8",
            "ok",
            "5956"
          ],
          [
            "8",
            "delayed",
            "547"
          ],
          [
            "9",
            "ok",
            "5861"
          ],
          [
            "9",
            "delayed",
            "761"
          ],
          [
            "10",
            "delayed",
            "903"
          ],
          [
            "10",
            "ok",
            "5783"
          ],
          [
            "11",
            "delayed",
            "986"
          ],
          [
            "11",
            "ok",
            "5115"
          ],
          [
            "12",
            "ok",
            "5174"
          ],
          [
            "12",
            "delayed",
            "1128"
          ],
          [
            "13",
            "ok",
            "5225"
          ],
          [
            "13",
            "delayed",
            "1346"
          ],
          [
            "14",
            "delayed",
            "1335"
          ],
          [
            "14",
            "ok",
            "4434"
          ],
          [
            "15",
            "delayed",
            "1562"
          ],
          [
            "15",
            "ok",
            "4818"
          ],
          [
            "16",
            "delayed",
            "1750"
          ],
          [
            "16",
            "ok",
            "4810"
          ],
          [
            "17",
            "ok",
            "4632"
          ],
          [
            "17",
            "delayed",
            "1802"
          ],
          [
            "18",
            "ok",
            "4720"
          ],
          [
            "18",
            "delayed",
            "1912"
          ],
          [
            "19",
            "delayed",
            "2001"
          ],
          [
            "19",
            "ok",
            "4461"
          ],
          [
            "20",
            "ok",
            "3526"
          ],
          [
            "20",
            "delayed",
            "1684"
          ],
          [
            "21",
            "ok",
            "2286"
          ],
          [
            "21",
            "delayed",
            "1194"
          ],
          [
            "22",
            "delayed",
            "96"
          ],
          [
            "22",
            "ok",
            "212"
          ]
        ]
      },
      "apps": [],
      "jobName": "paragraph_1479452383670_1235750632",
      "id": "20160410-003138_728063774",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%angular\n\n\u003ch3\u003eSave Modes\u003c/h3\u003e\n\nSave operations can optionally take a \u003ccode\u003eSaveMode\u003c/code\u003e, that specifies how to handle existing data if present. It is important to realize that these save modes do not utilize any locking and are not atomic. Additionally, when performing a \u003ccode\u003eOverwrite\u003c/code\u003e, the data will be deleted before writing out the new data.\n\u003cbr\u003e\u003cbr\u003e\n\u003cstyle\u003e\ntable, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n}\nth, td {\n    padding: 5px;\n}\n\u003c/style\u003e\n\n\u003ctable style\u003d\"width:100%\"\u003e\n  \u003ctr\u003e\n    \u003cth\u003eMode (Scala/Java)\u003c/th\u003e\n    \u003cth\u003eMeaning\u003c/th\u003e\t\t\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eSaveMode.ErrorIfExists (default)\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eWhen saving a DataFrame to a data source, if data already exists, an exception is expected to be thrown.\u003c/td\u003e\t\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eSaveMode.Append\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eWhen saving a DataFrame to a data source, if data/table already exists, contents of the DataFrame are expected to be appended to existing data.\u003c/td\u003e\t\t\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eSaveMode.Overwrite\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eOverwrite mode means that when saving a DataFrame to a data source, if data/table already exists, existing data is expected to be overwritten by the contents of the DataFrame.\u003c/td\u003e\t\t\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eSaveMode.Ignore\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eIgnore mode means that when saving a DataFrame to a data source, if data already exists, the save operation is expected to not save the contents of the DataFrame and to not change the existing data. This is similar to a CREATE TABLE IF NOT EXISTS in SQL.\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e",
      "dateUpdated": "Nov 18, 2016 12:29:43 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ]
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "ANGULAR",
            "data": "\u003ch3\u003eSave Modes\u003c/h3\u003e\n\nSave operations can optionally take a \u003ccode\u003eSaveMode\u003c/code\u003e, that specifies how to handle existing data if present. It is important to realize that these save modes do not utilize any locking and are not atomic. Additionally, when performing a \u003ccode\u003eOverwrite\u003c/code\u003e, the data will be deleted before writing out the new data.\n\u003cbr\u003e\u003cbr\u003e\n\u003cstyle\u003e\ntable, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n}\nth, td {\n    padding: 5px;\n}\n\u003c/style\u003e\n\n\u003ctable style\u003d\"width:100%\"\u003e\n  \u003ctr\u003e\n    \u003cth\u003eMode (Scala/Java)\u003c/th\u003e\n    \u003cth\u003eMeaning\u003c/th\u003e\t\t\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eSaveMode.ErrorIfExists (default)\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eWhen saving a DataFrame to a data source, if data already exists, an exception is expected to be thrown.\u003c/td\u003e\t\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eSaveMode.Append\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eWhen saving a DataFrame to a data source, if data/table already exists, contents of the DataFrame are expected to be appended to existing data.\u003c/td\u003e\t\t\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eSaveMode.Overwrite\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eOverwrite mode means that when saving a DataFrame to a data source, if data/table already exists, existing data is expected to be overwritten by the contents of the DataFrame.\u003c/td\u003e\t\t\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eSaveMode.Ignore\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eIgnore mode means that when saving a DataFrame to a data source, if data already exists, the save operation is expected to not save the contents of the DataFrame and to not change the existing data. This is similar to a CREATE TABLE IF NOT EXISTS in SQL.\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "ANGULAR",
        "msg": "\u003ch3\u003eSave Modes\u003c/h3\u003e\n\nSave operations can optionally take a \u003ccode\u003eSaveMode\u003c/code\u003e, that specifies how to handle existing data if present. It is important to realize that these save modes do not utilize any locking and are not atomic. Additionally, when performing a \u003ccode\u003eOverwrite\u003c/code\u003e, the data will be deleted before writing out the new data.\n\u003cbr\u003e\u003cbr\u003e\n\u003cstyle\u003e\ntable, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n}\nth, td {\n    padding: 5px;\n}\n\u003c/style\u003e\n\n\u003ctable style\u003d\"width:100%\"\u003e\n  \u003ctr\u003e\n    \u003cth\u003eMode (Scala/Java)\u003c/th\u003e\n    \u003cth\u003eMeaning\u003c/th\u003e\t\t\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eSaveMode.ErrorIfExists (default)\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eWhen saving a DataFrame to a data source, if data already exists, an exception is expected to be thrown.\u003c/td\u003e\t\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eSaveMode.Append\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eWhen saving a DataFrame to a data source, if data/table already exists, contents of the DataFrame are expected to be appended to existing data.\u003c/td\u003e\t\t\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eSaveMode.Overwrite\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eOverwrite mode means that when saving a DataFrame to a data source, if data/table already exists, existing data is expected to be overwritten by the contents of the DataFrame.\u003c/td\u003e\t\t\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eSaveMode.Ignore\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eIgnore mode means that when saving a DataFrame to a data source, if data already exists, the save operation is expected to not save the contents of the DataFrame and to not change the existing data. This is similar to a CREATE TABLE IF NOT EXISTS in SQL.\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e"
      },
      "apps": [],
      "jobName": "paragraph_1479452383670_1235750632",
      "id": "20160410-003138_206029012",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Save to ORC file",
      "text": "%spark.spark\nimport org.apache.spark.sql.SaveMode\n\n// Save and Overwrite results to an ORC file\nupdatedDF.write.format(\"orc\").mode(SaveMode.Overwrite).save(\"flightsAndDelays.orc\")",
      "dateUpdated": "Mar 9, 2017 1:13:03 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import org.apache.spark.sql.SaveMode\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.sql.SaveMode\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383670_1235750632",
      "id": "20160410-003138_985965720",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Load from ORC file",
      "text": "%spark.spark\n// Load results back from ORC file\nval dfTest \u003d sqlContext.read.format(\"orc\").load(\"flightsAndDelays.orc\")\ndfTest.show",
      "dateUpdated": "Mar 9, 2017 1:13:03 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "dfTest: org.apache.spark.sql.DataFrame \u003d [Year: int, Month: int, DayofMonth: int, DayOfWeek: int, CRSDepTime: int, UniqueCarrier: string, FlightNum: int, DepDelay: string, Origin: string, Dest: string, TaxiIn: string, TaxiOut: string, Distance: int, IsDelayed: int]\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\n|Year|Month|DayofMonth|DayOfWeek|CRSDepTime|UniqueCarrier|FlightNum|DepDelay|Origin|Dest|TaxiIn|TaxiOut|Distance|IsDelayed|\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\n|2008|    1|         3|        4|      1955|           WN|      335|       8|   IAD| TPA|     4|      8|     810|        0|\n|2008|    1|         3|        4|       735|           WN|     3231|      19|   IAD| TPA|     5|     10|     810|        1|\n|2008|    1|         3|        4|       620|           WN|      448|       8|   IND| BWI|     3|     17|     515|        0|\n|2008|    1|         3|        4|       930|           WN|     1746|      -4|   IND| BWI|     3|      7|     515|        0|\n|2008|    1|         3|        4|      1755|           WN|     3920|      34|   IND| BWI|     3|     10|     515|        1|\n|2008|    1|         3|        4|      1915|           WN|      378|      25|   IND| JAX|     4|     10|     688|        1|\n|2008|    1|         3|        4|      1830|           WN|      509|      67|   IND| LAS|     3|      7|    1591|        1|\n|2008|    1|         3|        4|      1040|           WN|      535|      -1|   IND| LAS|     7|      7|    1591|        0|\n|2008|    1|         3|        4|       615|           WN|       11|       2|   IND| MCI|     6|     19|     451|        0|\n|2008|    1|         3|        4|      1620|           WN|      810|       0|   IND| MCI|     3|      6|     451|        0|\n|2008|    1|         3|        4|       700|           WN|      100|       6|   IND| MCO|     5|     19|     828|        0|\n|2008|    1|         3|        4|      1510|           WN|     1333|      94|   IND| MCO|     6|      8|     828|        1|\n|2008|    1|         3|        4|      1430|           WN|      829|      -4|   IND| MDW|     9|     12|     162|        0|\n|2008|    1|         3|        4|       715|           WN|     1016|       0|   IND| MDW|     7|     21|     162|        0|\n|2008|    1|         3|        4|      1700|           WN|     1827|       2|   IND| MDW|     4|     10|     162|        0|\n|2008|    1|         3|        4|      1020|           WN|     2272|       9|   IND| MDW|     6|      9|     162|        0|\n|2008|    1|         3|        4|      1425|           WN|      675|      27|   IND| PHX|     7|      8|    1489|        1|\n|2008|    1|         3|        4|       745|           WN|     1144|       9|   IND| PHX|     5|     16|    1489|        0|\n|2008|    1|         3|        4|      1255|           WN|        4|      28|   IND| TPA|     4|      9|     838|        1|\n|2008|    1|         3|        4|      1325|           WN|       54|      51|   ISP| BWI|     2|      5|     220|        1|\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "dfTest: org.apache.spark.sql.DataFrame \u003d [Year: int, Month: int, DayofMonth: int, DayOfWeek: int, CRSDepTime: int, UniqueCarrier: string, FlightNum: int, DepDelay: string, Origin: string, Dest: string, TaxiIn: string, TaxiOut: string, Distance: int, IsDelayed: int]\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\n|Year|Month|DayofMonth|DayOfWeek|CRSDepTime|UniqueCarrier|FlightNum|DepDelay|Origin|Dest|TaxiIn|TaxiOut|Distance|IsDelayed|\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\n|2008|    1|         3|        4|      1955|           WN|      335|       8|   IAD| TPA|     4|      8|     810|        0|\n|2008|    1|         3|        4|       735|           WN|     3231|      19|   IAD| TPA|     5|     10|     810|        1|\n|2008|    1|         3|        4|       620|           WN|      448|       8|   IND| BWI|     3|     17|     515|        0|\n|2008|    1|         3|        4|       930|           WN|     1746|      -4|   IND| BWI|     3|      7|     515|        0|\n|2008|    1|         3|        4|      1755|           WN|     3920|      34|   IND| BWI|     3|     10|     515|        1|\n|2008|    1|         3|        4|      1915|           WN|      378|      25|   IND| JAX|     4|     10|     688|        1|\n|2008|    1|         3|        4|      1830|           WN|      509|      67|   IND| LAS|     3|      7|    1591|        1|\n|2008|    1|         3|        4|      1040|           WN|      535|      -1|   IND| LAS|     7|      7|    1591|        0|\n|2008|    1|         3|        4|       615|           WN|       11|       2|   IND| MCI|     6|     19|     451|        0|\n|2008|    1|         3|        4|      1620|           WN|      810|       0|   IND| MCI|     3|      6|     451|        0|\n|2008|    1|         3|        4|       700|           WN|      100|       6|   IND| MCO|     5|     19|     828|        0|\n|2008|    1|         3|        4|      1510|           WN|     1333|      94|   IND| MCO|     6|      8|     828|        1|\n|2008|    1|         3|        4|      1430|           WN|      829|      -4|   IND| MDW|     9|     12|     162|        0|\n|2008|    1|         3|        4|       715|           WN|     1016|       0|   IND| MDW|     7|     21|     162|        0|\n|2008|    1|         3|        4|      1700|           WN|     1827|       2|   IND| MDW|     4|     10|     162|        0|\n|2008|    1|         3|        4|      1020|           WN|     2272|       9|   IND| MDW|     6|      9|     162|        0|\n|2008|    1|         3|        4|      1425|           WN|      675|      27|   IND| PHX|     7|      8|    1489|        1|\n|2008|    1|         3|        4|       745|           WN|     1144|       9|   IND| PHX|     5|     16|    1489|        0|\n|2008|    1|         3|        4|      1255|           WN|        4|      28|   IND| TPA|     4|      9|     838|        1|\n|2008|    1|         3|        4|      1325|           WN|       54|      51|   ISP| BWI|     2|      5|     220|        1|\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\nonly showing top 20 rows\n\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383670_1235750632",
      "id": "20160410-003138_1142035788",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Compare DataFrame Sizes (i.e. Compare Original DataFrame with one Loaded from HDFS)",
      "text": "%spark.spark\n// Note: if output assertion succeeds no warning messages will be printed\nassert (dfTest.count \u003d\u003d updatedDF.count, println(\"Assertion Fail: Files are of different sizes.\"))",
      "dateUpdated": "Mar 9, 2017 1:13:58 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [],
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "apps": [],
      "jobName": "paragraph_1479452383671_1235365884",
      "id": "20160410-003138_2134135677",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Saving to Persistent Tables\nUnlike the `registerTempTable` command, `saveAsTable` will materialize the contents of the dataframe and create a pointer to the data in the HiveMetastore. Persistent tables will still exist even after your Spark program has restarted, as long as you maintain your connection to the same metastore. A DataFrame for a persistent table can be created by calling the `table` method on a `SQLContext` with the name of the table.\u003cbr\u003e\nBy default `saveAsTable` will create a “managed table”, meaning that the location of the data will be controlled by the metastore. Managed tables will also have their data deleted automatically when a table is dropped.\u003cbr\u003e",
      "dateUpdated": "Nov 18, 2016 12:29:43 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ]
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003eSaving to Persistent Tables\u003c/h3\u003e\n\u003cp\u003eUnlike the \u003ccode\u003eregisterTempTable\u003c/code\u003e command, \u003ccode\u003esaveAsTable\u003c/code\u003e will materialize the contents of the dataframe and create a pointer to the data in the HiveMetastore. Persistent tables will still exist even after your Spark program has restarted, as long as you maintain your connection to the same metastore. A DataFrame for a persistent table can be created by calling the \u003ccode\u003etable\u003c/code\u003e method on a \u003ccode\u003eSQLContext\u003c/code\u003e with the name of the table.\u003cbr\u003e\n\u003cbr  /\u003eBy default \u003ccode\u003esaveAsTable\u003c/code\u003e will create a “managed table”, meaning that the location of the data will be controlled by the metastore. Managed tables will also have their data deleted automatically when a table is dropped.\u003cbr\u003e\u003c/p\u003e\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eSaving to Persistent Tables\u003c/h3\u003e\n\u003cp\u003eUnlike the \u003ccode\u003eregisterTempTable\u003c/code\u003e command, \u003ccode\u003esaveAsTable\u003c/code\u003e will materialize the contents of the dataframe and create a pointer to the data in the HiveMetastore. Persistent tables will still exist even after your Spark program has restarted, as long as you maintain your connection to the same metastore. A DataFrame for a persistent table can be created by calling the \u003ccode\u003etable\u003c/code\u003e method on a \u003ccode\u003eSQLContext\u003c/code\u003e with the name of the table.\u003cbr\u003e\n\u003cbr  /\u003eBy default \u003ccode\u003esaveAsTable\u003c/code\u003e will create a “managed table”, meaning that the location of the data will be controlled by the metastore. Managed tables will also have their data deleted automatically when a table is dropped.\u003cbr\u003e\u003c/p\u003e\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383671_1235365884",
      "id": "20160410-003138_1146451145",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Save to a Table",
      "text": "%spark.spark\nupdatedDF.write.format(\"orc\").mode(SaveMode.Overwrite).saveAsTable(\"flightsPermTbl\")",
      "dateUpdated": "Mar 9, 2017 1:13:59 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [],
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "apps": [],
      "jobName": "paragraph_1479452383671_1235365884",
      "id": "20160410-003138_1181113131",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Read from Table to a New DataFrame",
      "text": "%spark.spark\nval dfFromTbl \u003d sqlContext.table(\"flightsPermTbl\")",
      "dateUpdated": "Mar 9, 2017 1:13:59 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "dfFromTbl: org.apache.spark.sql.DataFrame \u003d [Year: int, Month: int, DayofMonth: int, DayOfWeek: int, CRSDepTime: int, UniqueCarrier: string, FlightNum: int, DepDelay: string, Origin: string, Dest: string, TaxiIn: string, TaxiOut: string, Distance: int, IsDelayed: int]\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "dfFromTbl: org.apache.spark.sql.DataFrame \u003d [Year: int, Month: int, DayofMonth: int, DayOfWeek: int, CRSDepTime: int, UniqueCarrier: string, FlightNum: int, DepDelay: string, Origin: string, Dest: string, TaxiIn: string, TaxiOut: string, Distance: int, IsDelayed: int]\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383671_1235365884",
      "id": "20160410-003138_1777043496",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show Elements of DataFrame",
      "text": "%spark.spark\ndfFromTbl.show(5)",
      "dateUpdated": "Mar 9, 2017 1:12:59 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "editorSetting": {
          "language": "scala"
        },
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\n|Year|Month|DayofMonth|DayOfWeek|CRSDepTime|UniqueCarrier|FlightNum|DepDelay|Origin|Dest|TaxiIn|TaxiOut|Distance|IsDelayed|\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\n|2008|    1|         3|        4|      1955|           WN|      335|       8|   IAD| TPA|     4|      8|     810|        0|\n|2008|    1|         3|        4|       735|           WN|     3231|      19|   IAD| TPA|     5|     10|     810|        1|\n|2008|    1|         3|        4|       620|           WN|      448|       8|   IND| BWI|     3|     17|     515|        0|\n|2008|    1|         3|        4|       930|           WN|     1746|      -4|   IND| BWI|     3|      7|     515|        0|\n|2008|    1|         3|        4|      1755|           WN|     3920|      34|   IND| BWI|     3|     10|     515|        1|\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\nonly showing top 5 rows\n\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\n|Year|Month|DayofMonth|DayOfWeek|CRSDepTime|UniqueCarrier|FlightNum|DepDelay|Origin|Dest|TaxiIn|TaxiOut|Distance|IsDelayed|\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\n|2008|    1|         3|        4|      1955|           WN|      335|       8|   IAD| TPA|     4|      8|     810|        0|\n|2008|    1|         3|        4|       735|           WN|     3231|      19|   IAD| TPA|     5|     10|     810|        1|\n|2008|    1|         3|        4|       620|           WN|      448|       8|   IND| BWI|     3|     17|     515|        0|\n|2008|    1|         3|        4|       930|           WN|     1746|      -4|   IND| BWI|     3|      7|     515|        0|\n|2008|    1|         3|        4|      1755|           WN|     3920|      34|   IND| BWI|     3|     10|     515|        1|\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\nonly showing top 5 rows\n\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383671_1235365884",
      "id": "20160410-003138_1714958443",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show Tables",
      "text": "%spark.sql\n\nSHOW Tables\n\n-- Notice that unlike flightsTempTbl, flightsPermTbl is a permanent table",
      "dateUpdated": "Mar 9, 2017 1:13:29 PM",
      "config": {
        "editorMode": "ace/mode/sql",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "tableName",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "isTemporary",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "tableName",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "isTemporary",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "tableName\tisTemporary\nflightstemptbl\ttrue\nflightspermtbl\tfalse\nsample_07\tfalse\nsample_08\tfalse\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "tableName\tisTemporary\nflightstemptbl\ttrue\nflightspermtbl\tfalse\nsample_07\tfalse\nsample_08\tfalse\n",
        "comment": "",
        "msgTable": [
          [
            {
              "key": "isTemporary",
              "value": "flightstemptbl"
            },
            {
              "key": "isTemporary",
              "value": "true"
            }
          ],
          [
            {
              "value": "flightspermtbl"
            },
            {
              "value": "false"
            }
          ],
          [
            {
              "value": "sample_07"
            },
            {
              "value": "false"
            }
          ],
          [
            {
              "value": "sample_08"
            },
            {
              "value": "false"
            }
          ]
        ],
        "columnNames": [
          {
            "name": "tableName",
            "index": 0.0,
            "aggr": "sum"
          },
          {
            "name": "isTemporary",
            "index": 1.0,
            "aggr": "sum"
          }
        ],
        "rows": [
          [
            "flightstemptbl",
            "true"
          ],
          [
            "flightspermtbl",
            "false"
          ],
          [
            "sample_07",
            "false"
          ],
          [
            "sample_08",
            "false"
          ]
        ]
      },
      "apps": [],
      "jobName": "paragraph_1479452383671_1235365884",
      "id": "20160410-003138_1928525114",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Drop Managed Table",
      "text": "%spark.sql\n\nDROP TABLE flightsPermTbl",
      "dateUpdated": "Mar 9, 2017 1:13:29 PM",
      "config": {
        "editorMode": "ace/mode/sql",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [],
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "apps": [],
      "jobName": "paragraph_1479452383671_1235365884",
      "id": "20160410-003138_750906827",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Describe Table",
      "text": "%spark.sql\n\nSHOW tables\n-- notice that flightsPermTbl is no longer available",
      "dateUpdated": "Mar 9, 2017 1:18:47 PM",
      "config": {
        "editorMode": "ace/mode/sql",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "tableName",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "isTemporary",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "tableName",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "isTemporary",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "tableName\tisTemporary\nflightstemptbl\ttrue\nsample_07\tfalse\nsample_08\tfalse\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "tableName\tisTemporary\nflightstemptbl\ttrue\nsample_07\tfalse\nsample_08\tfalse\n",
        "comment": "",
        "msgTable": [
          [
            {
              "key": "isTemporary",
              "value": "flightstemptbl"
            },
            {
              "key": "isTemporary",
              "value": "true"
            }
          ],
          [
            {
              "value": "sample_07"
            },
            {
              "value": "false"
            }
          ],
          [
            {
              "value": "sample_08"
            },
            {
              "value": "false"
            }
          ]
        ],
        "columnNames": [
          {
            "name": "tableName",
            "index": 0.0,
            "aggr": "sum"
          },
          {
            "name": "isTemporary",
            "index": 1.0,
            "aggr": "sum"
          }
        ],
        "rows": [
          [
            "flightstemptbl",
            "true"
          ],
          [
            "sample_07",
            "false"
          ],
          [
            "sample_08",
            "false"
          ]
        ]
      },
      "apps": [],
      "jobName": "paragraph_1479452383671_1235365884",
      "id": "20160410-003138_1877131617",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "The End",
      "text": "%md\nYou\u0027ve reached the end of this lab! We hope you\u0027ve been able to successfully complete all portions of this lab.",
      "dateUpdated": "Nov 18, 2016 12:29:43 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "title": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ]
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eYou\u0027ve reached the end of this lab! We hope you\u0027ve been able to successfully complete all portions of this lab.\u003c/p\u003e\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eYou\u0027ve reached the end of this lab! We hope you\u0027ve been able to successfully complete all portions of this lab.\u003c/p\u003e\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383672_1233442139",
      "id": "20160410-003138_268828842",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Additional Resources\nThis is just the beggining of your journey with Spark. Make sure to checkout these additional useful resources:\n\n1. [Hortonworks Community Connection](https://hortonworks.com/community/)\n2. [Spark SQL, DataFrames and DataSets Guide](http://spark.apache.org/docs/latest/sql-programming-guide.html)",
      "dateUpdated": "Nov 18, 2016 12:29:43 PM",
      "config": {
        "tableHide": false,
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "enabled": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ]
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003eAdditional Resources\u003c/h3\u003e\n\u003cp\u003eThis is just the beggining of your journey with Spark. Make sure to checkout these additional useful resources:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href\u003d\"https://hortonworks.com/community/\"\u003eHortonworks Community Connection\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"http://spark.apache.org/docs/latest/sql-programming-guide.html\"\u003eSpark SQL, DataFrames and DataSets Guide\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n"
          }
        ]
      },
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eAdditional Resources\u003c/h3\u003e\n\u003cp\u003eThis is just the beggining of your journey with Spark. Make sure to checkout these additional useful resources:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href\u003d\"https://hortonworks.com/community/\"\u003eHortonworks Community Connection\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"http://spark.apache.org/docs/latest/sql-programming-guide.html\"\u003eSpark SQL, DataFrames and DataSets Guide\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n"
      },
      "apps": [],
      "jobName": "paragraph_1479452383673_1233057390",
      "id": "20160410-003138_2048237853",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "dateUpdated": "Nov 18, 2016 12:30:35 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1479452383673_1233057390",
      "id": "20160410-003138_1663715025",
      "dateCreated": "Nov 18, 2016 12:29:43 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Labs / Spark 1.6.x / Data Worker / Scala / 102 - Intro to SparkSQL",
  "id": "2C174C9EK",
  "angularObjects": {
    "2C9J4X9BB:shared_process": [],
    "2C97XTJFE:shared_process": [],
    "2C9BD8WCX:shared_process": [],
    "2CBT85YD7:shared_process": [],
    "2C8RGTKC3:shared_process": [],
    "2CBQNWPMD:shared_process": [],
    "2C8JDGPHH:shared_process": [],
    "2C9CSKWHY:shared_process": [],
    "2CBN9WPNN:shared_process": [],
    "2CB11VTD7:shared_process": [],
    "2C9Z4TVBW:shared_process": [],
    "2CB3RUCX8:shared_process": [],
    "2C9PSG7XP:shared_process": [],
    "2C8PPBWFC:shared_process": [],
    "2C95B7UJY:shared_process": [],
    "2CB91QEZG:shared_process": [],
    "2CAPDMDA1:shared_process": [],
    "2CACTG458:shared_process": [],
    "2CAD4U2BW:shared_process": [],
    "2CBTJTHZE:shared_process": [],
    "2C9VPGHR9:shared_process": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}