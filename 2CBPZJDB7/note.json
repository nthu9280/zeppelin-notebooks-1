{
  "paragraphs": [
    {
      "text": "%md\n\n# Machine Learning with Spark\n**Note**: this lab is left for reference purposes only and will be eventually removed as it does not qualify as a beginner Machine Learning lab based on feedback from the community.\n\nSpark: 1.6.2\n\nAuthor: Robert Hryniewicz\nTwitter: @RobertH8z",
      "user": "admin",
      "dateUpdated": "Feb 27, 2017 2:15:20 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown"
        },
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eMachine Learning with Spark\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: this lab is left for reference purposes only and will be eventually removed as it does not qualify as a beginner Machine Learning lab based on feedback from the community.\u003c/p\u003e\n\u003cp\u003eSpark: 1.6.2\u003c/p\u003e\n\u003cp\u003eAuthor: Robert Hryniewicz\u003cbr/\u003eTwitter: @RobertH8z\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488184634766_1928091116",
      "id": "20160531-234527_1318957937",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:15:20 PM",
      "dateFinished": "Feb 27, 2017 2:15:20 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Introduction",
      "text": "%md\n\nIn this lab you will run a few examples covering both *unsupervised* learning, such as K-Means clustering, as well as *supervised* learning, such as Decision Trees and Random Forests. The purpose of this lab is to get you started exploring machine learning algorithms without going into mathematical details of what goes on behind the scenes.\n\nOnce you\u0027re done, you should have a better feel for the powerful Machine Learning libraries that are part of Apache Spark.\n\nFor a complete documentation checkout the official Apache Spark [Machine Learning Library (MLlib) Guide](http://spark.apache.org/docs/latest/mllib-guide.html).",
      "user": "admin",
      "dateUpdated": "Feb 27, 2017 2:15:39 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown"
        },
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eIn this lab you will run a few examples covering both \u003cem\u003eunsupervised\u003c/em\u003e learning, such as K-Means clustering, as well as \u003cem\u003esupervised\u003c/em\u003e learning, such as Decision Trees and Random Forests. The purpose of this lab is to get you started exploring machine learning algorithms without going into mathematical details of what goes on behind the scenes.\u003c/p\u003e\n\u003cp\u003eOnce you\u0026rsquo;re done, you should have a better feel for the powerful Machine Learning libraries that are part of Apache Spark.\u003c/p\u003e\n\u003cp\u003eFor a complete documentation checkout the official Apache Spark \u003ca href\u003d\"http://spark.apache.org/docs/latest/mllib-guide.html\"\u003eMachine Learning Library (MLlib) Guide\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488184634767_1927706367",
      "id": "20160531-234527_2012845753",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:15:39 PM",
      "dateFinished": "Feb 27, 2017 2:15:39 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Programming Language: Scala",
      "text": "%md\n\nThroughout this lab we will use basic Scala syntax. If you would like to learn more about Scala, here\u0027s an excellent [Scala Tutorial](http://www.dhgarrette.com/nlpclass/scala/basics.html).",
      "user": "admin",
      "dateUpdated": "Feb 27, 2017 2:15:20 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThroughout this lab we will use basic Scala syntax. If you would like to learn more about Scala, here\u0026rsquo;s an excellent \u003ca href\u003d\"http://www.dhgarrette.com/nlpclass/scala/basics.html\"\u003eScala Tutorial\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488184634767_1927706367",
      "id": "20160531-234527_588679480",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:15:20 PM",
      "dateFinished": "Feb 27, 2017 2:15:20 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nTo run a paragraph in a Zeppelin notebook you can either click the `play` button (blue triangle) on the right-hand side or simply press `Shift + Enter`.",
      "user": "admin",
      "dateUpdated": "Feb 27, 2017 2:15:20 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eTo run a paragraph in a Zeppelin notebook you can either click the \u003ccode\u003eplay\u003c/code\u003e button (blue triangle) on the right-hand side or simply press \u003ccode\u003eShift + Enter\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488184634767_1927706367",
      "id": "20160531-234527_1555785908",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:15:20 PM",
      "dateFinished": "Feb 27, 2017 2:15:20 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Unsupervised Learning: K-Means Clustering",
      "text": "%md\n\n#### Unsupervised Learning\n\n\"Unsupervised learning is the machine learning task of inferring a function to describe hidden structure from unlabeled data. Since the examples given to the learner are unlabeled, there is no error or reward signal to evaluate a potential solution. This distinguishes unsupervised learning from supervised learning and reinforcement learning.\" - [wikipedia](https://en.wikipedia.org/wiki/Unsupervised_learning)\n\n#### K-Means Clustering\n\nK-Means is one of the most commonly used clustering algorithms that clusters the data points into a predefined number of clusters. (See [Spark docs](http://spark.apache.org/docs/latest/ml-clustering.html) for more info.)\n\nWe will use Spark ML API to generate a K-Means model using the Spark ML KMeans class. \n\nKMeans is implemented as an Estimator and generates a KMeansModel as the base model.\n\nNote that the data points for the training are hardcoded in the example below. Before you run the K-Means sample code, try to guess what the two cluster centers should be based on the training data.",
      "user": "admin",
      "dateUpdated": "Feb 27, 2017 2:15:51 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown"
        },
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eUnsupervised Learning\u003c/h4\u003e\n\u003cp\u003e\u0026ldquo;Unsupervised learning is the machine learning task of inferring a function to describe hidden structure from unlabeled data. Since the examples given to the learner are unlabeled, there is no error or reward signal to evaluate a potential solution. This distinguishes unsupervised learning from supervised learning and reinforcement learning.\u0026rdquo; - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Unsupervised_learning\"\u003ewikipedia\u003c/a\u003e\u003c/p\u003e\n\u003ch4\u003eK-Means Clustering\u003c/h4\u003e\n\u003cp\u003eK-Means is one of the most commonly used clustering algorithms that clusters the data points into a predefined number of clusters. (See \u003ca href\u003d\"http://spark.apache.org/docs/latest/ml-clustering.html\"\u003eSpark docs\u003c/a\u003e for more info.)\u003c/p\u003e\n\u003cp\u003eWe will use Spark ML API to generate a K-Means model using the Spark ML KMeans class. \u003c/p\u003e\n\u003cp\u003eKMeans is implemented as an Estimator and generates a KMeansModel as the base model.\u003c/p\u003e\n\u003cp\u003eNote that the data points for the training are hardcoded in the example below. Before you run the K-Means sample code, try to guess what the two cluster centers should be based on the training data.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488184634768_1938094587",
      "id": "20160531-234527_332869884",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:15:51 PM",
      "dateFinished": "Feb 27, 2017 2:15:51 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.spark\n\nimport org.apache.spark.ml.clustering.KMeans\nimport org.apache.spark.mllib.linalg.Vectors\n\nimport org.apache.spark.sql.DataFrame \n\n// Crates a DataFrame\nval dataset: DataFrame \u003d sqlContext.createDataFrame(Seq(\n  (1, Vectors.dense(0.0, 0.0, 0.0)),\n  (2, Vectors.dense(0.1, 0.1, 0.1)),\n  (3, Vectors.dense(0.2, 0.2, 0.2)),\n  (4, Vectors.dense(3.0, 3.0, 3.0)),\n  (5, Vectors.dense(3.1, 3.1, 3.1)),\n  (6, Vectors.dense(3.2, 3.2, 3.2))\n)).toDF(\"id\", \"features\")\n\n// Trains a k-means model\nval kmeans \u003d new KMeans()\n  .setK(2)                              // set number of clusters\n  .setFeaturesCol(\"features\")\n  .setPredictionCol(\"prediction\")\nval model \u003d kmeans.fit(dataset)\n\n// Shows the result\nprintln(\"Final Centers: \")\nmodel.clusterCenters.foreach(println)",
      "user": "admin",
      "dateUpdated": "Mar 9, 2017 12:56:06 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1488184634768_1938094587",
      "id": "20160531-234527_349239953",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:15:21 PM",
      "dateFinished": "Feb 27, 2017 2:15:21 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nDid you guess the cluster centers correctly?\n\nAlthough this is a very simple exmaple, it should provide you with an intuitive feel for K-Means clustering.\n\nBelow we\u0027ve provided you with a visualization of training data points and computed cluster centers.",
      "user": "admin",
      "dateUpdated": "Feb 27, 2017 2:16:07 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown"
        },
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eDid you guess the cluster centers correctly?\u003c/p\u003e\n\u003cp\u003eAlthough this is a very simple exmaple, it should provide you with an intuitive feel for K-Means clustering.\u003c/p\u003e\n\u003cp\u003eBelow we\u0026rsquo;ve provided you with a visualization of training data points and computed cluster centers.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488184634768_1938094587",
      "id": "20160531-234527_603082820",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:16:07 PM",
      "dateFinished": "Feb 27, 2017 2:16:07 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Visualized Result of K-Means Clustering",
      "text": "%md\n\nThe input data is marked with a blue **+** and the two K-Means cluser centers are marked with a red **x**.\n\n![scatter-plot](https://raw.githubusercontent.com/roberthryniewicz/images/master/lab201-plt-3d-scatter.png)",
      "user": "admin",
      "dateUpdated": "Mar 9, 2017 12:55:51 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown"
        },
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThe input data is marked with a blue \u003cstrong\u003e+\u003c/strong\u003e and the two K-Means cluser centers are marked with a red \u003cstrong\u003ex\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src\u003d\"https://raw.githubusercontent.com/roberthryniewicz/images/master/lab201-plt-3d-scatter.png\" alt\u003d\"scatter-plot\" /\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488184634768_1938094587",
      "id": "20160531-234527_2037625547",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:16:12 PM",
      "dateFinished": "Feb 27, 2017 2:16:12 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Supervised Learning: Decision Trees and Random Forests",
      "text": "%md\n\n### Supervised Learning\n\n\"Supervised learning is the machine learning task of inferring a function from labeled training data. The training data consist of a set of training examples. In supervised learning, each example is a pair consisting of an input object (typically a vector) and a desired output value (also called the supervisory signal). A supervised learning algorithm analyzes the training data and produces an inferred function, which can be used for mapping new examples. An optimal scenario will allow for the algorithm to correctly determine the class labels for unseen instances. This requires the learning algorithm to generalize from the training data to unseen situations in a \u0027reasonable\u0027 way.\" - [wikipedia](https://en.wikipedia.org/wiki/Supervised_learning)",
      "user": "admin",
      "dateUpdated": "Feb 27, 2017 2:15:21 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eSupervised Learning\u003c/h3\u003e\n\u003cp\u003e\u0026ldquo;Supervised learning is the machine learning task of inferring a function from labeled training data. The training data consist of a set of training examples. In supervised learning, each example is a pair consisting of an input object (typically a vector) and a desired output value (also called the supervisory signal). A supervised learning algorithm analyzes the training data and produces an inferred function, which can be used for mapping new examples. An optimal scenario will allow for the algorithm to correctly determine the class labels for unseen instances. This requires the learning algorithm to generalize from the training data to unseen situations in a \u0026lsquo;reasonable\u0026rsquo; way.\u0026rdquo; - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Supervised_learning\"\u003ewikipedia\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488184634768_1938094587",
      "id": "20160531-234527_450849720",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:15:21 PM",
      "dateFinished": "Feb 27, 2017 2:15:21 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Training Dataset",
      "text": "%md\n\nFor Decision Tree and Random Forest examples we will use a diabetes dataset that has been cleansed, scaled, and sanitized to remove any personally identifying information. The diabetes dataset contains a distribution for 70 sets of data recorded on diabetes patients (several weeks\u0027 to months\u0027 worth of glucose, insulin, and lifestyle data per patient + a description of the problem domain).\n\nKeep in mind that we are not particularly concerned what specific features represent, rather we will train our Decision Trees and Random Forest models to learn how the underlying features \"predict\" either negative or positive result based on the labeled training data set.",
      "user": "admin",
      "dateUpdated": "Feb 27, 2017 2:16:21 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown"
        },
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eFor Decision Tree and Random Forest examples we will use a diabetes dataset that has been cleansed, scaled, and sanitized to remove any personally identifying information. The diabetes dataset contains a distribution for 70 sets of data recorded on diabetes patients (several weeks\u0026rsquo; to months\u0026rsquo; worth of glucose, insulin, and lifestyle data per patient + a description of the problem domain).\u003c/p\u003e\n\u003cp\u003eKeep in mind that we are not particularly concerned what specific features represent, rather we will train our Decision Trees and Random Forest models to learn how the underlying features \u0026ldquo;predict\u0026rdquo; either negative or positive result based on the labeled training data set.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488184634769_1937709839",
      "id": "20160531-234527_1108937424",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:16:21 PM",
      "dateFinished": "Feb 27, 2017 2:16:21 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Download Dataset",
      "text": "%sh\n\nwget --no-check-certificate http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/binary/diabetes_scale -O /tmp/diabetes_scaled_data",
      "user": "admin",
      "dateUpdated": "Feb 27, 2017 2:15:21 PM",
      "config": {
        "editorMode": "ace/mode/sh",
        "colWidth": 12.0,
        "title": true,
        "results": [],
        "enabled": true,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sh"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1488184634769_1937709839",
      "id": "20160531-234527_2048196502",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:15:21 PM",
      "dateFinished": "Feb 27, 2017 2:15:22 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Preview Dataset",
      "text": "%sh\n\nhead /tmp/diabetes_scaled_data",
      "user": "admin",
      "dateUpdated": "Feb 27, 2017 2:15:21 PM",
      "config": {
        "editorMode": "ace/mode/sh",
        "colWidth": 12.0,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sh"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1488184634769_1937709839",
      "id": "20160531-234527_2023231351",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:15:21 PM",
      "dateFinished": "Feb 27, 2017 2:15:21 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Count Number of Lines in the Dataset",
      "text": "%sh\n\nwc -l \u003c /tmp/diabetes_scaled_data",
      "user": "admin",
      "dateUpdated": "Feb 27, 2017 2:17:41 PM",
      "config": {
        "editorMode": "ace/mode/sh",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sh"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1488184634769_1937709839",
      "id": "20160531-234527_1193249659",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:17:41 PM",
      "dateFinished": "Feb 27, 2017 2:17:41 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Move File to HDFS (if available)",
      "text": "%sh\n\n# remove existing copies of dataset from HDFS\nhadoop fs -rm -r -f /tmp/diabetes_scaled_data\n\n# put data into HDFS\nhadoop fs -put /tmp/diabetes_scaled_data /tmp/diabetes_scaled_data",
      "user": "admin",
      "dateUpdated": "Feb 27, 2017 2:15:21 PM",
      "config": {
        "editorMode": "ace/mode/sh",
        "colWidth": 12.0,
        "title": true,
        "results": [],
        "enabled": true,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sh"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1488184634769_1937709839",
      "id": "20161005-214739_393008546",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:15:21 PM",
      "dateFinished": "Feb 27, 2017 2:15:25 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Decision Trees",
      "text": "%md\n\nDecision trees and their ensembles are popular methods for the machine learning tasks of classification and regression. Decision trees are widely used since they are easy to interpret, handle categorical features, extend to the multiclass classification setting, do not require feature scaling, and are able to capture non-linearities and feature interactions. Tree ensemble algorithms such as random forests and boosting are among the top performers for classification and regression tasks.\n\nThe spark.ml implementation supports decision trees for binary and multiclass classification and for regression, using both continuous and categorical features. The implementation partitions data by rows, allowing distributed training with millions or even billions of instances. ([See docs](http://spark.apache.org/docs/latest/ml-classification-regression.html#decision-trees) for more info.)\n\nMake sure to checkout **[this](http://www.r2d3.us/visual-intro-to-machine-learning-part-1/)** great introduction to Visual Machine Learning to get an intuitive feel for the *ideas* behind Decision Tree classification.",
      "user": "admin",
      "dateUpdated": "Feb 27, 2017 2:16:32 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown"
        },
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eDecision trees and their ensembles are popular methods for the machine learning tasks of classification and regression. Decision trees are widely used since they are easy to interpret, handle categorical features, extend to the multiclass classification setting, do not require feature scaling, and are able to capture non-linearities and feature interactions. Tree ensemble algorithms such as random forests and boosting are among the top performers for classification and regression tasks.\u003c/p\u003e\n\u003cp\u003eThe spark.ml implementation supports decision trees for binary and multiclass classification and for regression, using both continuous and categorical features. The implementation partitions data by rows, allowing distributed training with millions or even billions of instances. (\u003ca href\u003d\"http://spark.apache.org/docs/latest/ml-classification-regression.html#decision-trees\"\u003eSee docs\u003c/a\u003e for more info.)\u003c/p\u003e\n\u003cp\u003eMake sure to checkout \u003cstrong\u003e\u003ca href\u003d\"http://www.r2d3.us/visual-intro-to-machine-learning-part-1/\"\u003ethis\u003c/a\u003e\u003c/strong\u003e great introduction to Visual Machine Learning to get an intuitive feel for the \u003cem\u003eideas\u003c/em\u003e behind Decision Tree classification.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488184634770_1938864085",
      "id": "20160531-234527_1744723127",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:16:32 PM",
      "dateFinished": "Feb 27, 2017 2:16:32 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Decision Tree",
      "text": "%spark.spark\n\nimport org.apache.spark.ml.Pipeline                                                                                          \nimport org.apache.spark.ml.classification.DecisionTreeClassifier                                                             \nimport org.apache.spark.ml.classification.DecisionTreeClassificationModel                                                    \nimport org.apache.spark.ml.feature.{StringIndexer, IndexToString, VectorIndexer}                                             \nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator \nimport org.apache.spark.sql.Row\nimport org.apache.spark.mllib.linalg.{Vector, Vectors}\n    \n// Load the data stored in LIBSVM format as a DataFrame.                                                                 \nval data \u003d sqlContext.read.format(\"libsvm\").load(\"/tmp/diabetes_scaled_data\")                                    \n                                                                                            \n// Index labels, adding metadata to the label column.                                                                    \n// Fit on whole dataset to include all labels in index.                                                                  \nval labelIndexer \u003d new StringIndexer()                                                                                   \n      .setInputCol(\"label\")                                                                                                  \n      .setOutputCol(\"indexedLabel\")                                                                                          \n      .fit(data)\n    \n// Automatically identify categorical features, and index them.                                                          \nval featureIndexer \u003d new VectorIndexer()                                                                                 \n      .setInputCol(\"features\")                                                                                               \n      .setOutputCol(\"indexedFeatures\")                                                                                       \n      .setMaxCategories(2) // features with \u003e 4 distinct values are treated as continuous                                    \n      .fit(data)                                                                                                             \n                                                                                                                             \n// Split the data into training and test sets (30% held out for testing)                                                 \nval Array(trainingData, testData) \u003d data.randomSplit(Array(0.7, 0.3))                                                    \n                                                                                                                             \n// Train a DecisionTree model.                                                                                           \nval dt \u003d new DecisionTreeClassifier()                                                                                    \n      .setLabelCol(\"indexedLabel\")                                                                                           \n      .setFeaturesCol(\"indexedFeatures\")\n      .setMaxDepth(5)\n                                                                                                                             \n// Convert indexed labels back to original labels.                                                                       \nval labelConverter \u003d new IndexToString()                                                                                 \n      .setInputCol(\"prediction\")                                                                                             \n      .setOutputCol(\"predictedLabel\")                                                                                        \n      .setLabels(labelIndexer.labels)                                                                                        \n                                                                                                                             \n// Chain indexers and tree in a Pipeline                                                                                 \nval pipeline \u003d new Pipeline()                                                                                            \n      .setStages(Array(labelIndexer, featureIndexer, dt, labelConverter))                                                    \n                                                                                                                             \n// Train model.  This also runs the indexers.                                                                            \nval model \u003d pipeline.fit(trainingData)                                                                                   \n                                                                                                                             \n// Make predictions.                                                                                                     \nval predictions \u003d model.transform(testData)                                                                              \n                                                                                                                             \n// Select example rows to display.                                                                                       \npredictions.select(\"predictedLabel\", \"label\", \"features\").show(5)                                                        \n                                                                                                                             \n// Select (prediction, true label) and compute test error                                                                \nval evaluator \u003d new MulticlassClassificationEvaluator()                                                                  \n      .setLabelCol(\"indexedLabel\")                                                                                           \n      .setPredictionCol(\"prediction\")                                                                                        \n      .setMetricName(\"precision\")                                                                                            \n    \nval accuracy \u003d evaluator.evaluate(predictions)                                                                           \nprintln(\"Test Error \u003d \" + (1.0 - accuracy))                                                                              \n                                                                                                                             \nval treeModel \u003d model.stages(2).asInstanceOf[DecisionTreeClassificationModel]                                            \nprintln(\"Learned classification tree model:\\n\" + treeModel.toDebugString)",
      "user": "admin",
      "dateUpdated": "Mar 9, 2017 12:56:06 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1488184634770_1938864085",
      "id": "20160531-234527_903900070",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:16:39 PM",
      "dateFinished": "Feb 27, 2017 2:16:42 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Random Forests",
      "text": "%md\n\nNow let\u0027s see if we can achieve a better performance with an ensemble of trees known as random forests. \n\nRandom forests combine many decision trees in order to reduce the risk of overfitting. The spark.ml implementation supports random forests for binary and multiclass classification and for regression, using both continuous and categorical features. ([See docs](http://spark.apache.org/docs/latest/ml-classification-regression.html#random-forests) for more info.)\n\nIn the example below we will combine five (5) trees to create a forest of trees.",
      "user": "admin",
      "dateUpdated": "Feb 27, 2017 2:16:51 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown"
        },
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eNow let\u0026rsquo;s see if we can achieve a better performance with an ensemble of trees known as random forests. \u003c/p\u003e\n\u003cp\u003eRandom forests combine many decision trees in order to reduce the risk of overfitting. The spark.ml implementation supports random forests for binary and multiclass classification and for regression, using both continuous and categorical features. (\u003ca href\u003d\"http://spark.apache.org/docs/latest/ml-classification-regression.html#random-forests\"\u003eSee docs\u003c/a\u003e for more info.)\u003c/p\u003e\n\u003cp\u003eIn the example below we will combine five (5) trees to create a forest of trees.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488184634770_1938864085",
      "id": "20160531-234527_1954753725",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:16:51 PM",
      "dateFinished": "Feb 27, 2017 2:16:51 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Random Forest",
      "text": "%spark.spark\n\nimport org.apache.spark.ml.Pipeline                                                                                                     \nimport org.apache.spark.ml.classification.{RandomForestClassificationModel, RandomForestClassifier}                                     \nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator                                                                 \nimport org.apache.spark.ml.feature.{IndexToString, StringIndexer, VectorIndexer}                                                        \n\n// Load and parse the LIBSVM data file, converting it to a DataFrame.\nval data \u003d sqlContext.read.format(\"libsvm\").load(\"/tmp/diabetes_scaled_data\") \n                                                                                                                           \n// Index labels, adding metadata to the label column.                                                                               \n// Fit on whole dataset to include all labels in index.                                                                             \nval labelIndexer \u003d new StringIndexer()                                                                                              \n      .setInputCol(\"label\")                                                                                                             \n      .setOutputCol(\"indexedLabel\")                                                                                                     \n      .fit(data)                                                                                                                        \n\n// Automatically identify categorical features, and index them.                                                                     \nval featureIndexer \u003d new VectorIndexer()                                                                                            \n      .setInputCol(\"features\")                                                                                                          \n      .setOutputCol(\"indexedFeatures\")                                                                                                  \n      .setMaxCategories(2)                                                                                                              \n      .fit(data)                                                                                                                        \n                                                                                                                                        \n// Split the data into training and test sets (30% held out for testing)                                                            \nval Array(trainingData, testData) \u003d data.randomSplit(Array(0.7, 0.3))                                                               \n                                                                                                                                        \n// Train a RandomForest model.                                                                                                      \nval rf \u003d new RandomForestClassifier()                                                                                               \n      .setLabelCol(\"indexedLabel\")                                                                                                      \n      .setFeaturesCol(\"indexedFeatures\")                                                                                                \n      .setNumTrees(5)                                                                                                                  \n                                                                                                                                        \n// Convert indexed labels back to original labels.                                                                                  \nval labelConverter \u003d new IndexToString()                                                                                            \n      .setInputCol(\"prediction\")                                                                                                        \n      .setOutputCol(\"predictedLabel\")                                                                                                   \n      .setLabels(labelIndexer.labels)                                                                                                   \n                                                                                                                                        \n// Chain indexers and forest in a Pipeline                                                                                          \nval pipeline \u003d new Pipeline()                                                                                                       \n      .setStages(Array(labelIndexer, featureIndexer, rf, labelConverter))                                                               \n                                                                                                                                        \n// Train model.  This also runs the indexers.                                                                                       \nval model \u003d pipeline.fit(trainingData)                                                                                              \n                                                                                                                                        \n// Make predictions.                                                                                                                \nval predictions \u003d model.transform(testData)                                                                                         \n                                                                                                                                        \n// Select example rows to display.                                                                                                  \npredictions.select(\"predictedLabel\", \"label\", \"features\").show(5)                                                                   \n                                                                                                                                        \n// Select (prediction, true label) and compute test error                                                                           \nval evaluator \u003d new MulticlassClassificationEvaluator()                                                                             \n      .setLabelCol(\"indexedLabel\")                                                                                                      \n      .setPredictionCol(\"prediction\")                                                                                                   \n      .setMetricName(\"precision\")                                                                                                       \n    \nval accuracy \u003d evaluator.evaluate(predictions)                                                                                      \nprintln(\"Test Error \u003d \" + (1.0 - accuracy))                                                                                         \nval rfModel \u003d model.stages(2).asInstanceOf[RandomForestClassificationModel]                                                         \nprintln(\"Learned classification forest model:\\n\" + rfModel.toDebugString)  ",
      "user": "admin",
      "dateUpdated": "Mar 9, 2017 12:56:06 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1488184634770_1938864085",
      "id": "20160531-234527_1341024269",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:17:05 PM",
      "dateFinished": "Feb 27, 2017 2:17:07 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nHas the accuracy improved after training the dataset using the Random Forest model? Does the accuracy improve if you increase the number of trees?\n\nWhat did you find interesting in the output of a Random Forest classifier?",
      "user": "admin",
      "dateUpdated": "Feb 27, 2017 2:17:24 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown"
        },
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eHas the accuracy improved after training the dataset using the Random Forest model? Does the accuracy improve if you increase the number of trees?\u003c/p\u003e\n\u003cp\u003eWhat did you find interesting in the output of a Random Forest classifier?\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488184634771_1938479336",
      "id": "20160531-234527_754013818",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:17:24 PM",
      "dateFinished": "Feb 27, 2017 2:17:24 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "The End",
      "text": "%md\n\nThis concludes our lab. Hopefully you\u0027ve got a taste of how easy it is to run clustering and classification models with Apache Spark!",
      "user": "admin",
      "dateUpdated": "Feb 27, 2017 2:15:21 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThis concludes our lab. Hopefully you\u0026rsquo;ve got a taste of how easy it is to run clustering and classification models with Apache Spark!\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488184634771_1938479336",
      "id": "20160531-234527_409238179",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:15:21 PM",
      "dateFinished": "Feb 27, 2017 2:15:21 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Resources: Hortonworks Community Connection",
      "text": "%md\n\nMake sure to checkout [Hortonworks Community Connection (HCC)](https://community.hortonworks.com/answers/index.html) if you have Apache Spark and/or Data Science / Analytics related questions or you would like to contribute back to the community with your own answers/examples/articles/repos.\n\nAll best,\nThe HCC Team!\n\n[![HCC](http://hortonworks.com/wp-content/uploads/2016/03/logo-hcc.png)](https://community.hortonworks.com/answers/index.html)",
      "user": "admin",
      "dateUpdated": "Feb 27, 2017 2:17:16 PM",
      "config": {
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown"
        },
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eMake sure to checkout \u003ca href\u003d\"https://community.hortonworks.com/answers/index.html\"\u003eHortonworks Community Connection (HCC)\u003c/a\u003e if you have Apache Spark and/or Data Science / Analytics related questions or you would like to contribute back to the community with your own answers/examples/articles/repos.\u003c/p\u003e\n\u003cp\u003eAll best,\u003cbr/\u003eThe HCC Team!\u003c/p\u003e\n\u003cp\u003e\u003ca href\u003d\"https://community.hortonworks.com/answers/index.html\"\u003e\u003cimg src\u003d\"http://hortonworks.com/wp-content/uploads/2016/03/logo-hcc.png\" alt\u003d\"HCC\" /\u003e\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1488184634771_1938479336",
      "id": "20160531-234527_1823436759",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "dateStarted": "Feb 27, 2017 2:17:16 PM",
      "dateFinished": "Feb 27, 2017 2:17:16 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Feb 27, 2017 2:07:14 PM",
      "config": {
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "results": {},
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1488184634771_1938479336",
      "id": "20160531-234527_1909965823",
      "dateCreated": "Feb 27, 2017 2:07:14 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Labs / Spark 1.6.x / Data Scientist / Scala / 101 - Intro to Machine Learning",
  "id": "2CBPZJDB7",
  "angularObjects": {
    "2C9J4X9BB:shared_process": [],
    "2C97XTJFE:shared_process": [],
    "2C9BD8WCX:shared_process": [],
    "2CBT85YD7:shared_process": [],
    "2C8RGTKC3:shared_process": [],
    "2CBQNWPMD:shared_process": [],
    "2C8JDGPHH:shared_process": [],
    "2C9CSKWHY:shared_process": [],
    "2CBN9WPNN:shared_process": [],
    "2CB11VTD7:shared_process": [],
    "2C9Z4TVBW:shared_process": [],
    "2CB3RUCX8:shared_process": [],
    "2C9PSG7XP:shared_process": [],
    "2C8PPBWFC:shared_process": [],
    "2CB91QEZG:shared_process": [],
    "2CAPDMDA1:shared_process": [],
    "2C95B7UJY:shared_process": [],
    "2CACTG458:shared_process": [],
    "2CAD4U2BW:shared_process": [],
    "2C9VPGHR9:shared_process": []
  },
  "config": {
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {}
}